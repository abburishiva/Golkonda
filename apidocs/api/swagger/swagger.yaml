swagger: '2.0'
################################################################################
#                              API Information                                 #
################################################################################
"info": {
  "version": "v1",
  "title": "DOCUMENTATION FOR TALENT-SCREEN API'S",
  "description": "This is a Swagger Spec for the The TALENT-SCREEN API'S used by the Talentscreen_Team\n",
  "contact": {
    "name": "Talent_screen API Team",
    "email": "engr@innova-path.com",
    "url": "http://wiki.api.dev.talentscreen.io/docs"
  }
}
"host": "api.dev.talentscreen.io"
"basePath": "/v1"
"schemes": [
  "https"
]
"securityDefinitions": {
  "Bearer": {
    "type": "apiKey",
    "name": "Authorization",
    "in": "header"
  }
}
"tags": [
{
  "name": "commonTypes",
  "description": "Everything about your commonTypes"
},
{
  "name": "commonStatus",
  "description": "Everything about your commonStatus"
},
{
  "name": "candidates",
  "description": "Everything about your candidates"
},
{
  "name": "commonEntites",
  "description": "Everything about your commonEntites"
},
{
  "name": "codeverification",
  "description": "This is about codeverification"
},
{
  "name": "commonCategories",
  "description": "Everything about your commonCategories"
},
{
  "name": "commonLevels",
  "description": "Everything about your commonLevels"
},
{
  "name": "commonRoles",
  "description": "Everything about your commonRoles"
},
{
  "name": "choiceQuestions",
  "description": "Everything about your choiceQuestions"
},
{
  "name": "codingQuestions",
  "description": "Everything about your codingQuestions"
},
{
  "name": "emailActivation",
  "description": "You are emailActivation into talentscreen-site"
},
{
  "name": "emailEngine",
  "description": "About emailEngine"
},
{
  "name": "employerChallenges",
  "description": "Everything about your employerchallenges"
},
{
  "name": "employers",
  "description": "Everything about your employers"
},
{
  "name": "forgotpassword",
  "description": "You are forgotpassword into talentscreen-site"
},
{
  "name": "login",
  "description": "You are login into talentscreen-site"
},
{
  "name": "lookupEducationLevels",
  "description": "Everything about your lookupEducationLevels"
},
{
  "name": "lookupEmpDesignations",
  "description": "Everything about your lookupEmpDesignations"
},
{
  "name": "lookupWorkStatus",
  "description": "Everything about your lookupWorkStatus"
},
{
  "name": "lookupCities",
  "description": "Everything about your lookupcities"
},
{
  "name": "lookupCountries",
  "description": "Everything about your lookupCountries"
},
{
  "name": "notificationUsers",
  "description": "Everything about your notificationUsers"
},
{
  "name": "publicReviews",
  "description": "Everything about your publicReviews"
},
{
  "name": "rigister",
  "description": "You are rigistering into talentscreen-site"
},
{
  "name": "subjects",
  "description": "Everything about your subjects"
},
{
  "name": "userReviews",
  "description": "Everything about your userReviews"
},
{
  "name": "videoQuestions",
  "description": "Everything about your videoQuestions"
},
{
  "name": "resume",
  "description": "About resume parsing"
},
{
  "name": "questions",
  "description": "Everything about your SQlQuestions"
},
{
  "name": "signals",
  "description": "Everything about your signals"
},
{
  "name": "organization",
  "description": "Everything about your Organizations"
},
{
  "name": "cards",
  "description": "Everything about your cards"
},
{
  "name": "staticQuestions",
  "description": "Everything about your staticQuestions"
},
{
  "name": "autocomplete",
  "description": "Everything about your autocomplete"
},
{
  "name": "lookupCountryCurrencies",
  "description": "Everything about your autocomplete"
},
{
  "name": "jobapplications",
  "description": "Everything about your jobApplications"
},
{
  "name": "categories",
  "description": "Everything about your categories"
},
{
  "name": "lookupCurrencies",
  "description": "Everything about your lookupCurrencies"
},
{
  "name": "employersChallenges",
  "description": "Everything about your employerschallenges"
},
{
  "name": "audioQuestions",
  "description": "Everything about your audioQuestions"
},
{
  "name": "analyticsQuestion",
  "description": "Everything about your analytics_question"
},
{
  "name": "commonTerms",
  "description": "Everything about your commonTerms"
},
{
  "name": "typedQuestions",
  "description": "Everything about your typedQuestions"
},
{
  "name": "whiteboardQuestions",
  "description": "Everything about your whiteboardQuestions"
},
{
  "name": "lookupDesignations",
  "description": "Everything about your lookupDesignations"
},
{
  "name": "lookupSalaryunits",
  "description": "Everything about your lookupSalaryunits"
},
{
  "name": "employersSubjects",
  "description": "Everything about your employersSubjects"
},
{
  "name": "employerInterviews",
  "description": "Everything about your employerInterviews"
},
{
  "name": "analyticsQuestion",
  "description": "Everything about your analyticsQuestion"
},
{
  "name": "employersQuestions",
  "description": "Everything about your employersQuestions"
},
{
  "name": "resumePermissions",
  "description": "Everything about your resumePermissions"
},
{
  "name": "Resumes",
  "description": "Everything about your Resumes"
},
{
  "name": "resumeRequests",
  "description": "Everything about your resumeRequests"
},
{
  "name": "cacheLoad",
  "description": "Everything about your cacheLoad"
},
{
  "name": "Jobs",
  "description": "Everything about your Jobs"
},
{
  "name": "skills",
  "description": "Everything about your skills"
},
{
  "name": "commonEntities",
  "description": "Everything about your commonEntities"
},
{
  "name": "commonValues",
  "description": "Everything about your commonValues"
},
{
  "name": "cacheDeletion",
  "description": "Everything about your cacheDeletion"
},
{
  "name": "compiler",
  "description": "Everything about your compiler"
},
{
  "name": "Challenges",
  "description": "Everything about your Challenges"
},
{
  "name": "Google_Api",
  "description": "Everything about your Google Api"
},
{
  "name": "lookupIndustries",
  "description": "Everything about your lookupIndustries"
}
]
################################################################################
#                                           Paths                              #
################################################################################
"paths": {
  "/audio/questions": {
    "get": {
      "tags": [
        "audioQuestions"
      ],
      "summary": "List all audio_questions",
      "operationId": "getAudioQuestions",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "subjectid",
        "in": "query",
        "description": "filter by subjectid",
        "required": false,
        "type": "array",
        "items": {
          "type": "integer"
        }
      },
      {
        "name": "levelid",
        "in": "query",
        "description": "filter by levelid",
        "required": false,
        "type": "array",
        "items": {
          "type": "integer"
        }
      },
      {
        "name": "reviewDone",
        "in": "query",
        "description": "filter by reviewDone",
        "required": false,
        "type": "array",
        "items": {
          "type": "integer"
        }
      },
      {
        "name": "sort",
        "in": "query",
        "description": "sort by",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      {
        "name": "limit",
        "in": "query",
        "description": "how many Records to view",
        "type": "string",
        "format": "string",
        "required": false
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all audioQuestions.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "400": {
          "description": "UnexpectedClientErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "404": {
          "description": "Records not found.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    },
    "post": {
      "tags": [
        "audioQuestions"
      ],
      "summary": "Create a new audio_Questions",
      "operationId": "createAudioQuestions",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "body",
        "name": "audioQuestions",
        "description": "The audioQuestions you want to create.",
        "required": true,
        "schema": {
          "$ref": "#/definitions/audio_questions"
        }
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "201": {
          "description": "New audioQuestions is created.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "401": {
          "description": "Authentication Is Failed..",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "403": {
          "description": "No token provided.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/audio/questions/{id}": {
    "get": {
      "tags": [
        "audioQuestions"
      ],
      "summary": "Lookup a specific audioQuestions",
      "operationId": "getByIdaudioQuestions",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "id",
        "type": "number",
        "description": "The id of the audioQuestions you want to lookup.",
        "required": true
      },
      {
        "name": "type",
        "in": "query",
        "description": "typeall for single id",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      }
      ],
      "responses": {
        "200": {
          "description": "An audioQuestions.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        }
      }
    },
    "put": {
      "tags": [
        "audioQuestions"
      ],
      "summary": "Update a audioQuestions",
      "operationId": "updateaudioQuestions",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "id",
        "type": "number",
        "description": "The id of the audioQuestions you want to update.",
        "required": true
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "in": "body",
        "name": "audioQuestions",
        "description": "The audioQuestions you want update with.",
        "required": false,
        "schema": {
          "$ref": "#/definitions/audio_questions"
        }
      }
      ],
      "responses": {
        "200": {
          "description": "The audioQuestions has been successfully updated.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        }
      }
    },
    "delete": {
      "tags": [
        "audioQuestions"
      ],
      "summary": "Delete a audioQuestions",
      "operationId": "removeaudioQuestions",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "id",
        "type": "number",
        "description": "The id of the audioQuestions you want to update.",
        "required": true
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "204": {
          "description": "The audioQuestions has been deleted.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        },
        "404": {
          "description": "Records not found to delete.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/candidates": {
    "get": {
      "tags": [
        "candidates"
      ],
      "summary": "List all candidates",
      "operationId": "getcandidates",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "name": "limit",
        "in": "query",
        "description": "how many Records to view",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all Video_Questions.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "400": {
          "description": "UnexpectedClientErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "404": {
          "description": "Records not found.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    },
    "post": {
      "tags": [
        "candidates"
      ],
      "summary": "Create a new candidates",
      "operationId": "createcandidates",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "body",
        "name": "candidates",
        "description": "The candidates you want to create.",
        "required": true,
        "schema": {
          "$ref": "#/definitions/candidates"
        }
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "201": {
          "description": "New candidates is created.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "401": {
          "description": "Authentication Is Failed..",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "403": {
          "description": "No token provided.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/candidates/{candidate_id}": {
    "get": {
      "tags": [
        "candidates"
      ],
      "summary": "Lookup a specific notifications",
      "operationId": "getBycandidate_id",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "candidate_id",
        "type": "string",
        "description": "The id of the candidates you want to lookup.",
        "required": true
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all candidates.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        }
      }
    },
    "put": {
      "tags": [
        "candidates"
      ],
      "summary": "Update a candidates",
      "operationId": "updatecandidate",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "candidate_id",
        "type": "number",
        "description": "The id of the candidates you want to update.",
        "required": true
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "in": "body",
        "name": "candidates",
        "description": "The candidates you want update with.",
        "required": false,
        "schema": {
          "$ref": "#/definitions/candidates"
        }
      }
      ],
      "responses": {
        "200": {
          "description": "The candidates has been successfully updated.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        }
      }
    },
    "delete": {
      "tags": [
        "candidates"
      ],
      "summary": "Delete a candidates",
      "operationId": "removecandidates",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "candidate_id",
        "type": "number",
        "description": "The id of the candidates you want to update.",
        "required": true
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "204": {
          "description": "The candidates has been deleted.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        },
        "404": {
          "description": "Records not found to delete.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/candidates/{candidate_id}/challenges": {
    "get": {
      "tags": [
        "candidates"
      ],
      "summary": "getting the challenges by candidateid",
      "operationId": "getBychallenges",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "candidate_id",
        "type": "string",
        "description": "The id of the candidates you want to lookup.",
        "required": true
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "name": "limit",
        "in": "query",
        "description": "how many Records to view",
        "required": false,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all candidates.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        }
      }
    },
    "post": {
      "tags": [
        "candidates"
      ],
      "summary": "postchallenges with candidateid",
      "operationId": "postchallenges",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "body",
        "name": "candidates",
        "description": "The candidates you want update with.",
        "required": false,
        "schema": {
          "$ref": "#/definitions/candidates"
        }
      },
      {
        "in": "path",
        "name": "candidate_id",
        "type": "string",
        "description": "The id of the candidates you want to lookup.",
        "required": true
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all candidates.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        }
      }
    }
  },
  "/candidates/{candidate_id}/challenges/{challenge_id}": {
    "get": {
      "tags": [
        "candidates"
      ],
      "summary": "getting thw challenges with candidate id and challengeid",
      "operationId": "getBysinglechallenges",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "candidate_id",
        "type": "string",
        "description": "The id of the candidates you want to lookup.",
        "required": true
      },
      {
        "in": "path",
        "name": "challenge_id",
        "type": "string",
        "description": "The id of the candidates you want to lookup.",
        "required": true
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all candidates.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        }
      }
    },
    "put": {
      "tags": [
        "candidates"
      ],
      "summary": "update the challenges with candidate id and challengeid",
      "operationId": "updatechallenges",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "body",
        "name": "candidates",
        "description": "The candidates you want update with.",
        "required": false,
        "schema": {
          "$ref": "#/definitions/candidates"
        }
      },
      {
        "in": "path",
        "name": "candidate_id",
        "type": "string",
        "description": "The id of the candidates you want to lookup.",
        "required": true
      },
      {
        "in": "path",
        "name": "challenge_id",
        "type": "string",
        "description": "The id of the candidates you want to lookup.",
        "required": true
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all candidates.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        }
      }
    },
    "delete": {
      "tags": [
        "candidates"
      ],
      "summary": "delete the challenges with candidate id and challengeid",
      "operationId": "deletechallenges",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "candidate_id",
        "type": "string",
        "description": "The id of the candidates you want to lookup.",
        "required": true
      },
      {
        "in": "path",
        "name": "challenge_id",
        "type": "string",
        "description": "The id of the candidates you want to lookup.",
        "required": true
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all candidates.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        }
      }
    }
  },
  "/choice/questions": {
    "get": {
      "tags": [
        "choiceQuestions"
      ],
      "summary": "List all choice_Questions",
      "operationId": "getchoiceQuestions",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "subjectid",
        "in": "query",
        "description": "filter by subjectid",
        "required": false,
        "type": "array",
        "items": {
          "type": "integer"
        }
      },
      {
        "name": "subject",
        "in": "query",
        "description": "filter by subject",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      {
        "name": "level",
        "in": "query",
        "description": "filter by level",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      {
        "name": "levelid",
        "in": "query",
        "description": "filter by levelid",
        "required": false,
        "type": "array",
        "items": {
          "type": "integer"
        }
      },
      {
        "name": "type",
        "in": "query",
        "description": "Get By typeall",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      {
        "name": "sort",
        "in": "query",
        "description": "sort by",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      {
        "name": "limit",
        "in": "query",
        "description": "how many Records to view",
        "type": "string",
        "format": "string",
        "required": false
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all choice_Questions.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "400": {
          "description": "UnexpectedClientErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "404": {
          "description": "Records not found.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    },
    "post": {
      "tags": [
        "choiceQuestions"
      ],
      "summary": "Create a new choice_Questions",
      "operationId": "createchoiceQuestions",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "body",
        "name": "choiceQuestions",
        "description": "The choiceQuestions you want to create.",
        "required": true,
        "schema": {
          "$ref": "#/definitions/choiceQuestions"
        }
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "201": {
          "description": "New choiceQuestions is created.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "401": {
          "description": "Authentication Is Failed..",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "403": {
          "description": "No token provided.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/choice/questions/{id}": {
    "get": {
      "tags": [
        "choiceQuestions"
      ],
      "summary": "Lookup a specific choiceQuestions",
      "operationId": "getByIdchoiceQuestions",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "id",
        "type": "number",
        "description": "The id of the choiceQuestions you want to lookup.",
        "required": true
      },
      {
        "name": "type",
        "in": "query",
        "description": "typeall for single id",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all Choice_Questions.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        }
      }
    },
    "put": {
      "tags": [
        "choiceQuestions"
      ],
      "summary": "Update a choiceQuestions",
      "operationId": "updatechoiceQuestions",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "id",
        "type": "number",
        "description": "The id of the choiceQuestions you want to update.",
        "required": true
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "in": "body",
        "name": "choiceQuestions",
        "description": "The choiceQuestions you want update with.",
        "required": false,
        "schema": {
          "$ref": "#/definitions/Message"
        }
      }
      ],
      "responses": {
        "200": {
          "description": "The choiceQuestions has been successfully updated.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        }
      }
    },
    "delete": {
      "tags": [
        "choiceQuestions"
      ],
      "summary": "Delete a choiceQuestions",
      "operationId": "removechoiceQuestions",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "id",
        "type": "number",
        "description": "The id of the choiceQuestions you want to update.",
        "required": true
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "204": {
          "description": "The choiceQuestions has been deleted.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        },
        "404": {
          "description": "Records not found to delete.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/coding/questions": {
    "get": {
      "tags": [
        "codingQuestions"
      ],
      "summary": "List all codingQuestions",
      "operationId": "getcodingQuestions",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "subjectid",
        "in": "query",
        "description": "filter by subjectid",
        "required": false,
        "type": "array",
        "items": {
          "type": "integer"
        }
      },
      {
        "name": "name",
        "in": "query",
        "description": "filter by name",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      {
        "name": "levelid",
        "in": "query",
        "description": "filter by levelid",
        "required": false,
        "type": "array",
        "items": {
          "type": "integer"
        }
      },
      {
        "name": "type",
        "in": "query",
        "description": "Get By typeall",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      {
        "name": "sort",
        "in": "query",
        "description": "sort by",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      {
        "name": "limit",
        "in": "query",
        "description": "how many Records to view",
        "type": "string",
        "format": "string",
        "required": false
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all coding_Questions.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "400": {
          "description": "UnexpectedClientErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "404": {
          "description": "Records not found.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    },
    "post": {
      "tags": [
        "codingQuestions"
      ],
      "summary": "Create a new coding_Questions",
      "operationId": "createcodingQuestions",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "body",
        "name": "coding_Questions",
        "description": "The coding_Questions you want to create.",
        "required": true,
        "schema": {
          "$ref": "#/definitions/codingQuestions"
        }
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "201": {
          "description": "New coding_Questions is created.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "401": {
          "description": "Authentication Is Failed..",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "403": {
          "description": "No token provided.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/coding/questions/{id}": {
    "get": {
      "tags": [
        "codingQuestions"
      ],
      "summary": "Lookup a specific codingQuestions",
      "operationId": "getByIdcodingQuestions",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "id",
        "type": "number",
        "description": "The id of the codingQuestions you want to lookup.",
        "required": true
      },
      {
        "name": "type",
        "in": "query",
        "description": "typeall for single id",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all codingQuestions.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        }
      }
    },
    "put": {
      "tags": [
        "codingQuestions"
      ],
      "summary": "Update a codingQuestions",
      "operationId": "updatecodingQuestions",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "id",
        "type": "number",
        "description": "The id of the codingQuestions you want to update.",
        "required": true
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "in": "body",
        "name": "codingQuestions",
        "description": "The codingQuestions you want update with.",
        "required": false,
        "schema": {
          "$ref": "#/definitions/Message"
        }
      }
      ],
      "responses": {
        "200": {
          "description": "The codingQuestions has been successfully updated.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        }
      }
    },
    "delete": {
      "tags": [
        "codingQuestions"
      ],
      "summary": "Delete a codingQuestions",
      "operationId": "removecodingQuestions",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "id",
        "type": "number",
        "description": "The id of the codingQuestions you want to update.",
        "required": true
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "204": {
          "description": "The choiceQuestions has been deleted.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        },
        "404": {
          "description": "Records not found to delete.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/codeverification": {
    "post": {
      "tags": [
        "codeverification"
      ],
      "summary": "codeverification into TalentScreen_site",
      "operationId": "codeverification",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "body",
        "name": "codeverification",
        "description": "codeverification into TalentScreen_site.",
        "required": true,
        "schema": {
          "$ref": "#/definitions/Ts_codeverification"
        }
      }
      ],
      "responses": {
        "201": {
          "description": "code verified into talentScreen_site.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/common/types": {
    "get": {
      "tags": [
        "commonTypes"
      ],
      "summary": "List all Common_types",
      "operationId": "getAllCommonTypes",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "entityid",
        "in": "query",
        "description": "filter by entityid",
        "required": false,
        "type": "array",
        "items": {
          "type": "integer"
        }
      },
      {
        "name": "type",
        "in": "query",
        "description": "Get By typeall",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      {
        "name": "name",
        "in": "query",
        "description": "filter by name",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      {
        "name": "sort",
        "in": "query",
        "description": "sort by",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      {
        "name": "limit",
        "in": "query",
        "description": "how many Records to view",
        "type": "string",
        "format": "string",
        "required": true
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all types.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "400": {
          "description": "UnexpectedClientErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "404": {
          "description": "Records not found.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    },
    "post": {
      "tags": [
        "commonTypes"
      ],
      "summary": "Create a new common_types",
      "operationId": "create",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "body",
        "name": "common_types",
        "description": "The common_types you want to create.",
        "required": true,
        "schema": {
          "$ref": "#/definitions/common_types"
        }
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "201": {
          "description": "New Common_type is created.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "401": {
          "description": "Authentication Is Failed..",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "403": {
          "description": "No token provided.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/common/types/{id}": {
    "get": {
      "tags": [
        "commonTypes"
      ],
      "summary": "Lookup a specific common_types",
      "operationId": "getById",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "id",
        "type": "number",
        "description": "The id of the common_types you want to lookup.",
        "required": true
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all common_types.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        }
      }
    },
    "put": {
      "tags": [
        "commonTypes"
      ],
      "summary": "Update a common_types",
      "operationId": "update",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "id",
        "type": "number",
        "description": "The id of the common_types you want to update.",
        "required": true
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "in": "body",
        "name": "common_types",
        "description": "The common_types you want update with.",
        "required": false,
        "schema": {
          "$ref": "#/definitions/Message"
        }
      }
      ],
      "responses": {
        "200": {
          "description": "The common_types has been successfully updated.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        }
      }
    },
    "delete": {
      "tags": [
        "commonTypes"
      ],
      "summary": "Delete a common_types",
      "operationId": "remove",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "id",
        "type": "number",
        "description": "The id of the common_types you want to update.",
        "required": true
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "204": {
          "description": "The common_types has been deleted.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        },
        "404": {
          "description": "Records not found to delete.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/common/categories": {
    "get": {
      "tags": [
        "commonCategories"
      ],
      "summary": "List all CommonCategory",
      "operationId": "getAllCommonCategory",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "entityid",
        "in": "query",
        "description": "filter by entityid",
        "required": false,
        "type": "array",
        "items": {
          "type": "integer"
        }
      },
      {
        "name": "type",
        "in": "query",
        "description": "Get By typeall",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      {
        "name": "name",
        "in": "query",
        "description": "filter by name",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      {
        "name": "sort",
        "in": "query",
        "description": "sort by",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      {
        "name": "limit",
        "in": "query",
        "description": "how many Records to view",
        "type": "string",
        "format": "string",
        "required": true
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all types.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "400": {
          "description": "UnexpectedClientErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "404": {
          "description": "Records not found.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    },
    "post": {
      "tags": [
        "commonCategories"
      ],
      "summary": "Create a new CommonCategory",
      "operationId": "createCommonCategory",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "body",
        "name": "common_types",
        "description": "The common_types you want to create.",
        "required": true,
        "schema": {
          "$ref": "#/definitions/common_categories"
        }
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "201": {
          "description": "New Common_type is created.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "401": {
          "description": "Authentication Is Failed..",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "403": {
          "description": "No token provided.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/common/categories/{id}": {
    "get": {
      "tags": [
        "commonCategories"
      ],
      "summary": "Lookup a specific CommonCategory",
      "operationId": "getByIdcategories",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "id",
        "type": "number",
        "description": "The id of the common_categories you want to lookup.",
        "required": true
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all common_categories.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        }
      }
    },
    "put": {
      "tags": [
        "commonCategories"
      ],
      "summary": "Update a Common_Category",
      "operationId": "updateCommonCategory",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "id",
        "type": "number",
        "description": "The id of the common_types you want to update.",
        "required": true
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "in": "body",
        "name": "common_types",
        "description": "The common_types you want update with.",
        "required": false,
        "schema": {
          "$ref": "#/definitions/Message"
        }
      }
      ],
      "responses": {
        "200": {
          "description": "The common_types has been successfully updated.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        }
      }
    },
    "delete": {
      "tags": [
        "commonCategories"
      ],
      "summary": "Delete a common_categories",
      "operationId": "removeCommonCategory",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "id",
        "type": "number",
        "description": "The id of the common_types you want to update.",
        "required": true
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "204": {
          "description": "The common_types has been deleted.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        },
        "404": {
          "description": "Records not found to delete.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/common/levels": {
    "get": {
      "tags": [
        "commonLevels"
      ],
      "summary": "List all Commonlevel",
      "operationId": "getCommonlevels",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "entityid",
        "in": "query",
        "description": "filter by entityid",
        "required": false,
        "type": "array",
        "items": {
          "type": "integer"
        }
      },
      {
        "name": "type",
        "in": "query",
        "description": "Get By typeall",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      {
        "name": "name",
        "in": "query",
        "description": "filter by name",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      {
        "name": "sort",
        "in": "query",
        "description": "sort by",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      {
        "name": "limit",
        "in": "query",
        "description": "how many Records to view",
        "type": "string",
        "format": "string",
        "required": false
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all Commonlevel.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "400": {
          "description": "UnexpectedClientErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "404": {
          "description": "Records not found.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    },
    "post": {
      "tags": [
        "commonLevels"
      ],
      "summary": "Create a new Commmonlevels",
      "operationId": "createCommmonlevels",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "body",
        "name": "Commmonlevels",
        "description": "The Commmonlevels you want to create.",
        "required": true,
        "schema": {
          "$ref": "#/definitions/common_levels"
        }
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "201": {
          "description": "New Common_type is created.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "401": {
          "description": "Authentication Is Failed..",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "403": {
          "description": "No token provided.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/common/levels/{id}": {
    "get": {
      "tags": [
        "commonLevels"
      ],
      "summary": "Lookup a specific Commonlevels",
      "operationId": "getByIdlevels",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "id",
        "type": "number",
        "description": "The id of the common_categories you want to lookup.",
        "required": true
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all common_categories.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        }
      }
    },
    "put": {
      "tags": [
        "commonLevels"
      ],
      "summary": "Update a Commonlevels",
      "operationId": "updateCommonlevels",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "id",
        "type": "number",
        "description": "The id of the Commonlevels you want to update.",
        "required": true
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "in": "body",
        "name": "Commonlevels",
        "description": "The Commonlevels you want update with.",
        "required": false,
        "schema": {
          "$ref": "#/definitions/Message"
        }
      }
      ],
      "responses": {
        "200": {
          "description": "The Commonlevels has been successfully updated.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        }
      }
    },
    "delete": {
      "tags": [
        "commonLevels"
      ],
      "summary": "Delete a commonLevels",
      "operationId": "removeCommonlevels",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "id",
        "type": "number",
        "description": "The id of the Commonlevels you want to update.",
        "required": true
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "204": {
          "description": "The Commonlevels has been deleted.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        },
        "404": {
          "description": "Records not found to delete.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/common/roles": {
    "get": {
      "tags": [
        "commonRoles"
      ],
      "summary": "List all Common_roles",
      "operationId": "getAllCommonRoles",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "entityid",
        "in": "query",
        "description": "filter by entityid",
        "required": false,
        "type": "array",
        "items": {
          "type": "integer"
        }
      },
      {
        "name": "type",
        "in": "query",
        "description": "Get By typeall",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      {
        "name": "name",
        "in": "query",
        "description": "filter by name",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      {
        "name": "sort",
        "in": "query",
        "description": "sort by",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      {
        "name": "limit",
        "in": "query",
        "description": "how many Records to view",
        "type": "string",
        "format": "string",
        "required": true
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all types.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "400": {
          "description": "UnexpectedClientErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "404": {
          "description": "Records not found.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    },
    "post": {
      "tags": [
        "commonRoles"
      ],
      "summary": "Create a new common_roles",
      "operationId": "createcommon_roles",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "body",
        "name": "common_roles",
        "description": "The common_roles you want to create.",
        "required": true,
        "schema": {
          "$ref": "#/definitions/common_roles"
        }
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "201": {
          "description": "New common_roles is created.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "401": {
          "description": "Authentication Is Failed..",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "403": {
          "description": "No token provided.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/common/roles/{id}": {
    "get": {
      "tags": [
        "commonRoles"
      ],
      "summary": "Lookup a specific Commonroles",
      "operationId": "getByIdRoles",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "id",
        "type": "number",
        "description": "The id of the common_roles you want to lookup.",
        "required": true
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all common_roles.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        }
      }
    },
    "put": {
      "tags": [
        "commonRoles"
      ],
      "summary": "Update a Commonroles",
      "operationId": "updateCommonroles",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "id",
        "type": "number",
        "description": "The id of the Commonroles you want to update.",
        "required": true
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "in": "body",
        "name": "Commonroles",
        "description": "The Commonroles you want update with.",
        "required": false,
        "schema": {
          "$ref": "#/definitions/Message"
        }
      }
      ],
      "responses": {
        "200": {
          "description": "The Commonroles has been successfully updated.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        }
      }
    },
    "delete": {
      "tags": [
        "commonRoles"
      ],
      "summary": "Delete a common_roles",
      "operationId": "removeCommonroles",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "id",
        "type": "number",
        "description": "The id of the Commonroles you want to update.",
        "required": true
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "204": {
          "description": "The Commonroles has been deleted.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        },
        "404": {
          "description": "Records not found to delete.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/common/statuses": {
    "get": {
      "tags": [
        "commonStatus"
      ],
      "summary": "List all commonStatus",
      "operationId": "getAllcommonStatus",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "entityid",
        "in": "query",
        "description": "filter by entityid",
        "required": false,
        "type": "array",
        "items": {
          "type": "integer"
        }
      },
      {
        "name": "type",
        "in": "query",
        "description": "Get By typeall",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      {
        "name": "name",
        "in": "query",
        "description": "filter by name",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      {
        "name": "sort",
        "in": "query",
        "description": "sort by",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      {
        "name": "limit",
        "in": "query",
        "description": "how many Records to view",
        "type": "string",
        "format": "string",
        "required": true
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all types.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "400": {
          "description": "UnexpectedClientErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "404": {
          "description": "Records not found.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    },
    "post": {
      "tags": [
        "commonStatus"
      ],
      "summary": "Create a new commonStatus",
      "operationId": "createcommonStatus",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "body",
        "name": "commonStatus",
        "description": "The commonStatus you want to create.",
        "required": true,
        "schema": {
          "$ref": "#/definitions/common_status"
        }
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "201": {
          "description": "New commonStatus is created.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "401": {
          "description": "Authentication Is Failed..",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "403": {
          "description": "No token provided.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/common/statuses/{id}": {
    "get": {
      "tags": [
        "commonStatus"
      ],
      "summary": "Lookup a specific commonStatus",
      "operationId": "getByIdcommonStatus",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "id",
        "type": "number",
        "description": "The id of the commonStatus you want to lookup.",
        "required": true
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all commonStatus.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        }
      }
    },
    "put": {
      "tags": [
        "commonStatus"
      ],
      "summary": "Update a commonStatus",
      "operationId": "updatecommonStatus",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "id",
        "type": "number",
        "description": "The id of the commonStatus you want to update.",
        "required": true
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "in": "body",
        "name": "commonStatus",
        "description": "The commonStatus you want update with.",
        "required": false,
        "schema": {
          "$ref": "#/definitions/Message"
        }
      }
      ],
      "responses": {
        "200": {
          "description": "The commonStatus has been successfully updated.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        }
      }
    },
    "delete": {
      "tags": [
        "commonStatus"
      ],
      "summary": "Delete a commonStatus",
      "operationId": "removecommonStatus",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "id",
        "type": "number",
        "description": "The id of the commonStatus you want to update.",
        "required": true
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "204": {
          "description": "The commonStatus has been deleted.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        },
        "404": {
          "description": "Records not found to delete.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/emailActivation": {
    "post": {
      "tags": [
        "emailActivation"
      ],
      "summary": "emailActivationRouter into TalentScreen_site",
      "operationId": "emailActivationRouter",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "body",
        "name": "emailActivationRouter",
        "description": "emailActivationRouter into TalentScreen_site.",
        "required": true,
        "schema": {
          "$ref": "#/definitions/Ts_emailactivation"
        }
      }
      ],
      "responses": {
        "201": {
          "description": "code verified into talentScreen_site.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/employers": {
    "get": {
      "tags": [
        "employers"
      ],
      "summary": "List all employers",
      "operationId": "getemployers",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "name": "limit",
        "in": "query",
        "description": "how many Records to view",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all Video_Questions.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "400": {
          "description": "UnexpectedClientErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "404": {
          "description": "Records not found.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    },
    "post": {
      "tags": [
        "employers"
      ],
      "summary": "Create a new employeee",
      "operationId": "createemployers",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "body",
        "name": "employers",
        "description": "The employers you want to create.",
        "required": true,
        "schema": {
          "$ref": "#/definitions/employers"
        }
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "201": {
          "description": "New employers is created.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "401": {
          "description": "Authentication Is Failed..",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "403": {
          "description": "No token provided.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/employers/{emp_id}": {
    "get": {
      "tags": [
        "employers"
      ],
      "summary": "Lookup a specific employers",
      "operationId": "getByemployer",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "emp_id",
        "type": "string",
        "description": "The id of the employers you want to lookup.",
        "required": true
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all employers.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        }
      }
    },
    "put": {
      "tags": [
        "employers"
      ],
      "summary": "Update a employers",
      "operationId": "updateemployers",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "emp_id",
        "type": "number",
        "description": "The id of the employers you want to update.",
        "required": true
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "in": "body",
        "name": "employers",
        "description": "The employers you want update with.",
        "required": false,
        "schema": {
          "$ref": "#/definitions/employers"
        }
      }
      ],
      "responses": {
        "200": {
          "description": "The employers has been successfully updated.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        }
      }
    },
    "delete": {
      "tags": [
        "employers"
      ],
      "summary": "Delete a employers",
      "operationId": "removeemployers",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "emp_id",
        "type": "number",
        "description": "The id of the employers you want to update.",
        "required": true
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "204": {
          "description": "The employers has been deleted.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        },
        "404": {
          "description": "Records not found to delete.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/employers/{emp_id}/questions": {
    "get": {
      "tags": [
        "employers"
      ],
      "summary": "getting the questions by emp_id",
      "operationId": "getByquestionswithemp_id",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "emp_id",
        "type": "string",
        "description": "you are getting questions based on emp_id.",
        "required": true
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all employers.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        }
      }
    },
    "post": {
      "tags": [
        "employers"
      ],
      "summary": "postquestions with emp_id",
      "operationId": "postquestionswithemp_id",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "body",
        "name": "employers",
        "description": "The employers you want update with.",
        "required": false,
        "schema": {
          "$ref": "#/definitions/employers"
        }
      },
      {
        "in": "path",
        "name": "emp_id",
        "type": "string",
        "description": "you are posting questions based on emp_id.",
        "required": true
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all employers.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        }
      }
    }
  },
  "/employers/{emp_id}/questions/{question_id}": {
    "get": {
      "tags": [
        "employers"
      ],
      "summary": "getting thw questions with emp_id and question_id",
      "operationId": "getBysinglequestions",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "emp_id",
        "type": "string",
        "description": "you are getting the questions based on emp_id.",
        "required": true
      },
      {
        "in": "path",
        "name": "question_id",
        "type": "string",
        "description": "you are getting the single question based on emp_id.",
        "required": true
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all employers.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        }
      }
    },
    "put": {
      "tags": [
        "employers"
      ],
      "summary": "update the questions with emp_id and question_id",
      "operationId": "updatequestionswithquestion_id",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "body",
        "name": "candidates",
        "description": "The candidates you want update with.",
        "required": false,
        "schema": {
          "$ref": "#/definitions/employers"
        }
      },
      {
        "in": "path",
        "name": "emp_id",
        "type": "string",
        "description": "you are updating the questions based on emp_id.",
        "required": true
      },
      {
        "in": "path",
        "name": "question_id",
        "type": "string",
        "description": "you are updating the questions based on emp_id and question_id.",
        "required": true
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all employers.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        }
      }
    },
    "delete": {
      "tags": [
        "employers"
      ],
      "summary": "delete the employers with emp_id and question_id",
      "operationId": "deletequestionswithquestion_id",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "emp_id",
        "type": "string",
        "description": "The id of the employers you want to lookup.",
        "required": true
      },
      {
        "in": "path",
        "name": "question_id",
        "type": "string",
        "description": "The id of the employers you want to lookup.",
        "required": true
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all employers.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        }
      }
    }
  },
  "/employers/{emp_id}/subjects": {
    "get": {
      "tags": [
        "employers"
      ],
      "summary": "getting the subjects by emp_id",
      "operationId": "getBysubjectswithemp_id",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "emp_id",
        "type": "string",
        "description": "The id of the employers you want to lookup.",
        "required": true
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all employers.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        }
      }
    },
    "post": {
      "tags": [
        "employers"
      ],
      "summary": "postsubjects with emp_id",
      "operationId": "postsubjectswithemp_id",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "body",
        "name": "candidates",
        "description": "The candidates you want update with.",
        "required": false,
        "schema": {
          "$ref": "#/definitions/employers"
        }
      },
      {
        "in": "path",
        "name": "emp_id",
        "type": "string",
        "description": "The id of the employers you want to lookup.",
        "required": true
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all employers.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        }
      }
    }
  },
  "/employers/{emp_id}/subjects/{subject_id}": {
    "get": {
      "tags": [
        "employers"
      ],
      "summary": "getting thw subjects with emp_id and subject_id",
      "operationId": "getsubjectswithemp_id",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "emp_id",
        "type": "string",
        "description": "The id of the employers you want to lookup.",
        "required": true
      },
      {
        "in": "path",
        "name": "subject_id",
        "type": "string",
        "description": "The id of the employers you want to lookup.",
        "required": true
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all employers.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        }
      }
    },
    "put": {
      "tags": [
        "employers"
      ],
      "summary": "update the subjects with emp_id and subject_id",
      "operationId": "updatesubjectswithemp_id",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "body",
        "name": "candidates",
        "description": "The candidates you want update with.",
        "required": false,
        "schema": {
          "$ref": "#/definitions/employers"
        }
      },
      {
        "in": "path",
        "name": "emp_id",
        "type": "string",
        "description": "The id of the employers you want to lookup.",
        "required": true
      },
      {
        "in": "path",
        "name": "subject_id",
        "type": "string",
        "description": "The id of the employers you want to lookup.",
        "required": true
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all employers.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        }
      }
    },
    "delete": {
      "tags": [
        "employers"
      ],
      "summary": "delete the challenges with emp_id and challengeid",
      "operationId": "deletesubjectswithemp_id",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "emp_id",
        "type": "string",
        "description": "The id of the employers you want to lookup.",
        "required": true
      },
      {
        "in": "path",
        "name": "subject_id",
        "type": "string",
        "description": "The id of the employers you want to lookup.",
        "required": true
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all employers.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        }
      }
    }
  },
  "/employers/{emp_id}/challenges": {
    "get": {
      "tags": [
        "employers"
      ],
      "summary": "getting the challenges by emp_id",
      "operationId": "getBychallengeswithemp_id",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "emp_id",
        "type": "string",
        "description": "The id of the employers you want to lookup.",
        "required": true
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "name": "limit",
        "in": "query",
        "description": "how many Records to view",
        "required": false,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all employers.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        }
      }
    },
    "post": {
      "tags": [
        "employers"
      ],
      "summary": "postchallenges with emp_id",
      "operationId": "postchallengeswithemp_id",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "body",
        "name": "candidates",
        "description": "The candidates you want update with.",
        "required": false,
        "schema": {
          "$ref": "#/definitions/employers"
        }
      },
      {
        "in": "path",
        "name": "emp_id",
        "type": "string",
        "description": "The id of the employers you want to lookup.",
        "required": true
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all employers.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        }
      }
    }
  },
  "/employers/{emp_id}/challenges/{challenge_id}": {
    "get": {
      "tags": [
        "employers"
      ],
      "summary": "getting thw challenges with emp_id and challenge_id",
      "operationId": "getchallengeswithemp_id",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "emp_id",
        "type": "string",
        "description": "The id of the employers you want to lookup.",
        "required": true
      },
      {
        "in": "path",
        "name": "challenge_id",
        "type": "string",
        "description": "The id of the employers you want to lookup.",
        "required": true
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all employers.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        }
      }
    },
    "put": {
      "tags": [
        "employers"
      ],
      "summary": "update the challenges with emp_id and challenge_id",
      "operationId": "updatechallengeswithemp_id",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "body",
        "name": "candidates",
        "description": "The candidates you want update with.",
        "required": false,
        "schema": {
          "$ref": "#/definitions/employers"
        }
      },
      {
        "in": "path",
        "name": "emp_id",
        "type": "string",
        "description": "The id of the employers you want to lookup.",
        "required": true
      },
      {
        "in": "path",
        "name": "challenge_id",
        "type": "string",
        "description": "The id of the employers you want to lookup.",
        "required": true
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all employers.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        }
      }
    },
    "delete": {
      "tags": [
        "employers"
      ],
      "summary": "delete the challenges with emp_id and challengeid",
      "operationId": "deletechallengeswithemp_id",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "emp_id",
        "type": "string",
        "description": "The id of the employers you want to lookup.",
        "required": true
      },
      {
        "in": "path",
        "name": "challenge_id",
        "type": "string",
        "description": "The id of the employers you want to lookup.",
        "required": true
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all employers.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        }
      }
    }
  },
  "/employers_challenges": {
    "get": {
      "tags": [
        "employersChallenges"
      ],
      "summary": "List all employerschallenges",
      "operationId": "getAllemployerschallenges",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "name": "emp_id",
        "in": "query",
        "description": "filter by emp_id",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      {
        "name": "name",
        "in": "query",
        "description": "filter by name",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      {
        "name": "sort",
        "in": "query",
        "description": "sort by",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all types.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "400": {
          "description": "UnexpectedClientErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "404": {
          "description": "Records not found.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    },
    "post": {
      "tags": [
        "employersChallenges"
      ],
      "summary": "Create a new employerschallenges",
      "operationId": "createemployerschallenges",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "body",
        "name": "employerschallenges",
        "description": "The employerschallenges you want to create.",
        "required": true,
        "schema": {
          "$ref": "#/definitions/employers"
        }
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "201": {
          "description": "New employerschallenges is created.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "401": {
          "description": "Authentication Is Failed..",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "403": {
          "description": "No token provided.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/employers_challenges/{id}": {
    "get": {
      "tags": [
        "employersChallenges"
      ],
      "summary": "Lookup a specific employerschallenges",
      "operationId": "getByIdemployerschallenges",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "id",
        "type": "number",
        "description": "The id of the employerschallenges you want to lookup.",
        "required": true
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all employerschallenges.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        }
      }
    },
    "put": {
      "tags": [
        "employersChallenges"
      ],
      "summary": "Update a employerschallenges",
      "operationId": "updateemployerschallenges",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "id",
        "type": "number",
        "description": "The id of the employerschallenges you want to update.",
        "required": true
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "in": "body",
        "name": "employerschallenges",
        "description": "The employerschallenges you want update with.",
        "required": false,
        "schema": {
          "$ref": "#/definitions/Message"
        }
      }
      ],
      "responses": {
        "200": {
          "description": "The employerschallenges has been successfully updated.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        }
      }
    },
    "delete": {
      "tags": [
        "employersChallenges"
      ],
      "summary": "Delete a employerschallenges",
      "operationId": "removeemployerschallenges",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "id",
        "type": "number",
        "description": "The id of the employerschallenges you want to update.",
        "required": true
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "204": {
          "description": "The employerschallenges has been deleted.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        },
        "404": {
          "description": "Records not found to delete.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/infra/email-message": {
    "post": {
      "tags": [
        "emailEngine"
      ],
      "summary": "Create a new emailEngine",
      "operationId": "createemail",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "body",
        "name": "emailEngine",
        "description": "The email you want to create.",
        "required": true,
        "schema": {
          "$ref": "#/definitions/email_engine"
        }
      }
      ],
      "responses": {
        "201": {
          "description": "New email is sent.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "401": {
          "description": "Authentication Is Failed..",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "403": {
          "description": "No token provided.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/lookup/countries": {
    "get": {
      "tags": [
        "lookupCountries"
      ],
      "summary": "List all lookupCountries",
      "operationId": "getAlllookupCountries",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "short_name",
        "in": "query",
        "description": "filter by short_name",
        "required": false,
        "type": "array",
        "items": {
          "type": "integer"
        }
      },
      {
        "name": "type",
        "in": "query",
        "description": "Get By typeall",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      {
        "name": "iso3",
        "in": "query",
        "description": "filter by iso3",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      {
        "name": "sort",
        "in": "query",
        "description": "sort by",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      {
        "name": "limit",
        "in": "query",
        "description": "how many Records to view",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all types.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "400": {
          "description": "UnexpectedClientErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "404": {
          "description": "Records not found.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    },
    "post": {
      "tags": [
        "lookupCountries"
      ],
      "summary": "Create a new lookupCountries",
      "operationId": "createlookupCountries",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "body",
        "name": "lookupCountries",
        "description": "The lookupCountries you want to create.",
        "required": true,
        "schema": {
          "$ref": "#/definitions/lookup_Countries"
        }
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "201": {
          "description": "New lookupCountries is created.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "401": {
          "description": "Authentication Is Failed..",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "403": {
          "description": "No token provided.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/lookup/countries/{id}": {
    "get": {
      "tags": [
        "lookupCountries"
      ],
      "summary": "Lookup a specific lookupcountries",
      "operationId": "getByIdlookupcountries",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "id",
        "type": "number",
        "description": "The id of the lookupcountries you want to lookup.",
        "required": true
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all lookupcountries.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        }
      }
    },
    "put": {
      "tags": [
        "lookupCountries"
      ],
      "summary": "Update a lookupcountries",
      "operationId": "updatelookupcountries",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "id",
        "type": "number",
        "description": "The id of the lookupcountries you want to update.",
        "required": true
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "in": "body",
        "name": "lookupcountries",
        "description": "The lookupcountries you want update with.",
        "required": false,
        "schema": {
          "$ref": "#/definitions/Message"
        }
      }
      ],
      "responses": {
        "200": {
          "description": "The lookupcountries has been successfully updated.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        }
      }
    },
    "delete": {
      "tags": [
        "lookupCountries"
      ],
      "summary": "Delete a lookupcountries",
      "operationId": "removelookupcountries",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "id",
        "type": "number",
        "description": "The id of the lookupcountries you want to update.",
        "required": true
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "204": {
          "description": "The lookupcountries has been deleted.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        },
        "404": {
          "description": "Records not found to delete.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/lookup/cities": {
    "get": {
      "tags": [
        "lookupCities"
      ],
      "summary": "List all lookupcities",
      "operationId": "getAlllookupcities",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "region",
        "in": "query",
        "description": "filter by region",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      {
        "name": "latitude",
        "in": "query",
        "description": "filter by latitude",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      {
        "name": "longitude",
        "in": "query",
        "description": "filter by longitude",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      {
        "name": "zipcode",
        "in": "query",
        "description": "filter by countryid longitude",
        "required": false,
        "type": "array",
        "items": {
          "type": "number"
        }
      },
      {
        "name": "countryid",
        "in": "query",
        "description": "filter by countryid countryid",
        "required": false,
        "type": "array",
        "items": {
          "type": "number"
        }
      },
      {
        "name": "type",
        "in": "query",
        "description": "Get zipcode By typeall",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      {
        "name": "name",
        "in": "query",
        "description": "filter by name",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      {
        "name": "sort",
        "in": "query",
        "description": "sort by",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      {
        "name": "limit",
        "in": "query",
        "description": "how many Records to view",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all types.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "400": {
          "description": "UnexpectedClientErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "404": {
          "description": "Records not found.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    },
    "post": {
      "tags": [
        "lookupCities"
      ],
      "summary": "Create a new lookupcities",
      "operationId": "createlookupcities",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "body",
        "name": "lookupcities",
        "description": "The lookupcities you want to create.",
        "required": true,
        "schema": {
          "$ref": "#/definitions/lookup_cities"
        }
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "201": {
          "description": "New lookupcities is created.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "401": {
          "description": "Authentication Is Failed..",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "403": {
          "description": "No token provided.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/lookup/cities/{id}": {
    "get": {
      "tags": [
        "lookupCities"
      ],
      "summary": "Lookup a specific lookupcities",
      "operationId": "getByIdlookupcities",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "id",
        "type": "number",
        "description": "The id of the lookupcities you want to lookup.",
        "required": true
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all lookupcities.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        }
      }
    },
    "put": {
      "tags": [
        "lookupCities"
      ],
      "summary": "Update a lookupcities",
      "operationId": "updatelookupcities",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "id",
        "type": "number",
        "description": "The id of the lookupcities you want to update.",
        "required": true
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "in": "body",
        "name": "lookupcities",
        "description": "The lookupcities you want update with.",
        "required": false,
        "schema": {
          "$ref": "#/definitions/Message"
        }
      }
      ],
      "responses": {
        "200": {
          "description": "The lookupcities has been successfully updated.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        }
      }
    },
    "delete": {
      "tags": [
        "lookupCities"
      ],
      "summary": "Delete a lookupcities",
      "operationId": "removelookupcities",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "id",
        "type": "number",
        "description": "The id of the lookupcities you want to update.",
        "required": true
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "204": {
          "description": "The lookupcities has been deleted.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        },
        "404": {
          "description": "Records not found to delete.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/lookup/work/statuses": {
    "get": {
      "tags": [
        "lookupWorkStatus"
      ],
      "summary": "List all lookupWorkStatuses",
      "operationId": "getAlllookupWorkStatuses",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "id",
        "in": "query",
        "description": "filter by id",
        "required": false,
        "type": "array",
        "items": {
          "type": "integer"
        }
      },
      {
        "name": "name",
        "in": "query",
        "description": "filter by name",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      {
        "name": "sort",
        "in": "query",
        "description": "sort by",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      {
        "name": "limit",
        "in": "query",
        "description": "how many Records to view",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all types.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "400": {
          "description": "UnexpectedClientErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "404": {
          "description": "Records not found.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    },
    "post": {
      "tags": [
        "lookupWorkStatus"
      ],
      "summary": "Create a new lookupWorkStatuses",
      "operationId": "createlookupWorkStatuses",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "body",
        "name": "lookupWorkStatuses",
        "description": "The lookupWorkStatuses you want to create.",
        "required": true,
        "schema": {
          "$ref": "#/definitions/lookup_work_status"
        }
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "201": {
          "description": "New lookupWorkStatuses is created.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "401": {
          "description": "Authentication Is Failed..",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "403": {
          "description": "No token provided.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/lookup/work/statuses/{id}": {
    "get": {
      "tags": [
        "lookupWorkStatus"
      ],
      "summary": "Lookup a specific lookupWorkStatuses",
      "operationId": "getBylookupWorkStatuses",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "id",
        "type": "number",
        "description": "The id of the lookupWorkStatuses you want to lookup.",
        "required": true
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all lookupWorkStatuses.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        }
      }
    },
    "put": {
      "tags": [
        "lookupWorkStatus"
      ],
      "summary": "updatestatus",
      "operationId": "updateSalaryunits",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "id",
        "type": "number",
        "description": "The id of the lookupWorkStatuses you want to updateSalaryunits.",
        "required": true
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "in": "body",
        "name": "lookupWorkStatuses",
        "description": "The lookupWorkStatuses you want updateSalaryunits with.",
        "required": false,
        "schema": {
          "$ref": "#/definitions/Message"
        }
      }
      ],
      "responses": {
        "200": {
          "description": "The commonEntities has been successfully updateSalaryunitsd.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        }
      }
    },
    "delete": {
      "tags": [
        "lookupWorkStatus"
      ],
      "summary": "Delete a lookupWorkStatuses",
      "operationId": "removeSalaryunits",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "id",
        "type": "number",
        "description": "The id of the lookupWorkStatuses you want to updateSalaryunits.",
        "required": true
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "204": {
          "description": "The lookupWorkStatuses has been deleted.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        },
        "404": {
          "description": "Records not found to delete.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/lookup/employee/designations": {
    "get": {
      "tags": [
        "lookupEmpDesignations"
      ],
      "summary": "List all lookupEmployeeDesigantions",
      "operationId": "getAlllookupEmployeeDesigantions",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "id",
        "in": "query",
        "description": "filter by id",
        "required": false,
        "type": "array",
        "items": {
          "type": "integer"
        }
      },
      {
        "name": "name",
        "in": "query",
        "description": "filter by name",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      {
        "name": "sort",
        "in": "query",
        "description": "sort by",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all types.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "400": {
          "description": "UnexpectedClientErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "404": {
          "description": "Records not found.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    },
    "post": {
      "tags": [
        "lookupEmpDesignations"
      ],
      "summary": "Create a new lookupEmployeeDesigantions",
      "operationId": "createlookupEmployeeDesigantions",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "body",
        "name": "lookupEmployeeDesigantions",
        "description": "The lookupEmployeeDesigantions you want to create.",
        "required": true,
        "schema": {
          "$ref": "#/definitions/lookup_Employee_Designations"
        }
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "201": {
          "description": "New lookupEmployeeDesigantions is created.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "401": {
          "description": "Authentication Is Failed..",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "403": {
          "description": "No token provided.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/lookup/employee/designations/{id}": {
    "get": {
      "tags": [
        "lookupEmpDesignations"
      ],
      "summary": "Lookup a specific lookupEmployeeDesigantions",
      "operationId": "getBylookupEmployeeDesigantions",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "id",
        "type": "number",
        "description": "The id of the lookupEmployeeDesigantions you want to lookup.",
        "required": true
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all lookupEmployeeDesigantions.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        }
      }
    },
    "put": {
      "tags": [
        "lookupEmpDesignations"
      ],
      "summary": "updatestatus",
      "operationId": "updatelookupEmployeeDesigantions",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "id",
        "type": "number",
        "description": "The id of the lookupEmployeeDesigantions you want to updateSalaryunits.",
        "required": true
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "in": "body",
        "name": "lookupEmployeeDesigantions",
        "description": "The lookupEmployeeDesigantions you want updateSalaryunits with.",
        "required": false,
        "schema": {
          "$ref": "#/definitions/Message"
        }
      }
      ],
      "responses": {
        "200": {
          "description": "The commonEntities has been successfully updateSalaryunitsd.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        }
      }
    },
    "delete": {
      "tags": [
        "lookupEmpDesignations"
      ],
      "summary": "Delete a lookupEmployeeDesigantions",
      "operationId": "removelookupEmployeeDesigantions",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "id",
        "type": "number",
        "description": "The id of the lookupEmployeeDesigantions you want to updateSalaryunits.",
        "required": true
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "204": {
          "description": "The lookupEmployeeDesigantions has been deleted.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        },
        "404": {
          "description": "Records not found to delete.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/lookup/education/levels": {
    "get": {
      "tags": [
        "lookupEducationLevels"
      ],
      "summary": "List all lookupEducationLevels",
      "operationId": "getAlllookupEducationLevels",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "id",
        "in": "query",
        "description": "filter by id",
        "required": false,
        "type": "array",
        "items": {
          "type": "integer"
        }
      },
      {
        "name": "name",
        "in": "query",
        "description": "filter by name",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      {
        "name": "sort",
        "in": "query",
        "description": "sort by",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      {
        "name": "limit",
        "in": "query",
        "description": "how many Records to view",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all types.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "400": {
          "description": "UnexpectedClientErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "404": {
          "description": "Records not found.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    },
    "post": {
      "tags": [
        "lookupEducationLevels"
      ],
      "summary": "Create a new lookupEducationLevels",
      "operationId": "createlookupEducationLevels",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "body",
        "name": "lookupEducationLevels",
        "description": "The lookupEducationLevels you want to create.",
        "required": true,
        "schema": {
          "$ref": "#/definitions/lookup_Education_levels"
        }
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "201": {
          "description": "New lookupEducationLevels is created.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "401": {
          "description": "Authentication Is Failed..",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "403": {
          "description": "No token provided.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/lookup/education/levels/{id}": {
    "get": {
      "tags": [
        "lookupEducationLevels"
      ],
      "summary": "Lookup a specific lookupEducationLevels",
      "operationId": "getBylookupEducationLevels",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "id",
        "type": "number",
        "description": "The id of the lookupEducationLevels you want to lookup.",
        "required": true
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all lookupEducationLevels.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        }
      }
    },
    "put": {
      "tags": [
        "lookupEducationLevels"
      ],
      "summary": "updatestatus",
      "operationId": "updateEducationLevels",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "id",
        "type": "number",
        "description": "The id of the lookupEducationLevels you want to update levels.",
        "required": true
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "in": "body",
        "name": "lookupEducationLevels",
        "description": "The lookupEducationLevels you want update levels with.",
        "required": false,
        "schema": {
          "$ref": "#/definitions/Message"
        }
      }
      ],
      "responses": {
        "200": {
          "description": "The commonEntities has been successfully updatelevels.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        }
      }
    },
    "delete": {
      "tags": [
        "lookupEducationLevels"
      ],
      "summary": "Delete a lookupEducationLevels",
      "operationId": "removeEducationLevels",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "id",
        "type": "number",
        "description": "The id of the lookupEducationLevels you want to updatelevels.",
        "required": true
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "204": {
          "description": "The lookupEducationLevels has been deleted.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        },
        "404": {
          "description": "Records not found to delete.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/users/notifications": {
    "get": {
      "tags": [
        "notificationUsers"
      ],
      "summary": "List all notificationUsers",
      "operationId": "getnotificationUsers",
      "produces": [
        "application/json"
      ],
      "security": [
      {
        "Bearer": []
      }
      ],
      "parameters": [
      {
        "name": "x-access-key",
        "in": "header",
        "description": "x-access-key",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all Video_Questions.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "400": {
          "description": "UnexpectedClientErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "404": {
          "description": "Records not found.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    },
    "post": {
      "tags": [
        "notificationUsers"
      ],
      "summary": "Create a new notificationUsers",
      "operationId": "createnotificationUsers",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "security": [
      {
        "Bearer": []
      }
      ],
      "parameters": [
      {
        "in": "body",
        "name": "notificationUsers",
        "description": "The notificationUsers you want to create.",
        "required": true,
        "schema": {
          "$ref": "#/definitions/Notification_users"
        }
      },
      {
        "name": "x-access-key",
        "in": "header",
        "description": "x-access-key",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "201": {
          "description": "New notificationUsers is created.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "401": {
          "description": "Authentication Is Failed..",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "403": {
          "description": "No token provided.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/users/notifications/{id}": {
    "get": {
      "tags": [
        "notificationUsers"
      ],
      "summary": "Lookup a specific notifications",
      "operationId": "getBynotifications",
      "produces": [
        "application/json"
      ],
      "security": [
      {
        "Bearer": []
      }
      ],
      "parameters": [
      {
        "in": "path",
        "name": "id",
        "type": "string",
        "description": "The id of the notificationUsers you want to lookup.",
        "required": true
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all notificationUsers.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        }
      }
    },
    "put": {
      "tags": [
        "notificationUsers"
      ],
      "summary": "Update a notificationUsers",
      "operationId": "updatenotificationUsers",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "id",
        "type": "number",
        "description": "The id of the notificationUsers you want to update.",
        "required": true
      },
      {
        "name": "x-access-key",
        "in": "header",
        "description": "x-access-key",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "in": "body",
        "name": "notificationUsers",
        "description": "The notificationUsers you want update with.",
        "required": false,
        "schema": {
          "$ref": "#/definitions/Message"
        }
      }
      ],
      "responses": {
        "200": {
          "description": "The notificationUsers has been successfully updated.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        }
      }
    },
    "delete": {
      "tags": [
        "notificationUsers"
      ],
      "summary": "Delete a notificationUsers",
      "operationId": "removenotificationUsers",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "id",
        "type": "number",
        "description": "The id of the notificationUsers you want to update.",
        "required": true
      },
      {
        "name": "x-access-key",
        "in": "header",
        "description": "x-access-key",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "204": {
          "description": "The notificationUsers has been deleted.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        },
        "404": {
          "description": "Records not found to delete.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/users/notifications/{email_id}/subscriptions": {
    "get": {
      "tags": [
        "notificationUsers"
      ],
      "summary": "Lookup a specific notificationUsers with email_id",
      "operationId": "getSubscription",
      "produces": [
        "application/json"
      ],
      "security": [
      {
        "Bearer": []
      }
      ],
      "parameters": [
      {
        "in": "path",
        "name": "email_id",
        "type": "string",
        "description": "The id of the notificationUsers you want to lookup.",
        "required": true
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all notificationUsers.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        }
      }
    }
  },
  "/users/notifications/{user_id}/users_subscriptions": {
    "get": {
      "tags": [
        "notificationUsers"
      ],
      "summary": "Lookup a specific notificationUsers with email_id",
      "operationId": "getAllSubscriptions",
      "produces": [
        "application/json"
      ],
      "security": [
      {
        "Bearer": []
      }
      ],
      "parameters": [
      {
        "in": "path",
        "name": "user_id",
        "type": "string",
        "description": "The id of the notificationUsers you want to lookup.",
        "required": true
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all notificationUsers.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        }
      }
    },
    "put": {
      "tags": [
        "notificationUsers"
      ],
      "summary": "Update a notificationUsers",
      "operationId": "updateSubscriptions",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "user_id",
        "type": "string",
        "description": "The id of the notificationUsers you want to update.",
        "required": true
      },
      {
        "name": "x-access-key",
        "in": "header",
        "description": "x-access-key",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "in": "body",
        "name": "notificationUsers",
        "description": "The notificationUsers you want update with.",
        "required": false,
        "schema": {
          "$ref": "#/definitions/Message"
        }
      }
      ],
      "responses": {
        "200": {
          "description": "The notificationUsers has been successfully updated.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        }
      }
    }
  },
  "/user/authenticate": {
    "post": {
      "tags": [
        "login"
      ],
      "summary": "Login into TalentScreen_site",
      "operationId": "authenticate",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "body",
        "name": "Login",
        "description": "Login into TalentScreen_site.",
        "required": true,
        "schema": {
          "$ref": "#/definitions/Ts_login"
        }
      }
      ],
      "responses": {
        "201": {
          "description": "successfully login into talentScreen_site.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "401": {
          "description": "Authentication Is Failed..",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/user/register": {
    "post": {
      "tags": [
        "rigister"
      ],
      "summary": "Login into TalentScreen_site",
      "operationId": "register",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "body",
        "name": "register",
        "description": "Login into TalentScreen_site.",
        "required": true,
        "schema": {
          "$ref": "#/definitions/Ts_register"
        }
      }
      ],
      "responses": {
        "201": {
          "description": "successfully register into talentScreen_site.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "401": {
          "description": "Authentication Is Failed..",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/user/forgotpassword": {
    "post": {
      "tags": [
        "forgotpassword"
      ],
      "summary": "forgotpassword into TalentScreen_site",
      "operationId": "forgotpassword",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "body",
        "name": "forgotpassword",
        "description": "forgotpassword into TalentScreen_site.",
        "required": true,
        "schema": {
          "$ref": "#/definitions/Ts_forgotpassword"
        }
      }
      ],
      "responses": {
        "201": {
          "description": "code verified into talentScreen_site.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/users/reviews": {
    "get": {
      "tags": [
        "userReviews"
      ],
      "summary": "List all userReviews",
      "operationId": "getAlluserReviews",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "source",
        "in": "query",
        "description": "filter by source",
        "required": false,
        "type": "array",
        "items": {
          "type": "integer"
        }
      },
      {
        "name": "improve_message",
        "in": "query",
        "description": "filter by improve_message",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      {
        "name": "sort",
        "in": "query",
        "description": "sort by",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      {
        "name": "limit",
        "in": "query",
        "description": "how many Records to view",
        "required": false,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all reviews.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "400": {
          "description": "UnexpectedClientErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "404": {
          "description": "Records not found.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    },
    "post": {
      "tags": [
        "userReviews"
      ],
      "summary": "Create a new userReviews",
      "operationId": "createUserReview",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "body",
        "name": "userReviews",
        "description": "The userReviews you want to create.",
        "required": true,
        "schema": {
          "$ref": "#/definitions/User_reviews"
        }
      }
      ],
      "responses": {
        "201": {
          "description": "New Common_type is created.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "401": {
          "description": "Authentication Is Failed..",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "403": {
          "description": "No token provided.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/users/public/reviews": {
    "get": {
      "tags": [
        "publicReviews"
      ],
      "summary": "List all publicReviews",
      "operationId": "getAllpublicReviews",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "type",
        "in": "query",
        "description": "get by all",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      {
        "name": "limit",
        "in": "query",
        "description": "how many Records to view",
        "required": false,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all reviews.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "400": {
          "description": "UnexpectedClientErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "404": {
          "description": "Records not found.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/questions": {
    "get": {
      "tags": [
        "questions"
      ],
      "summary": "List all Questions",
      "operationId": "getQuestions",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "subjectid",
        "in": "query",
        "description": "filter by subjectid",
        "required": false,
        "type": "array",
        "items": {
          "type": "integer"
        }
      },
      {
        "name": "levelid",
        "in": "query",
        "description": "filter by levelid",
        "required": false,
        "type": "array",
        "items": {
          "type": "integer"
        }
      },
      {
        "name": "type",
        "in": "query",
        "description": "Get By typeall",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      {
        "name": "questiontype",
        "in": "query",
        "description": "Get By questiontype",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      {
        "name": "name",
        "in": "query",
        "description": "filter by name",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      {
        "name": "sort",
        "in": "query",
        "description": "sort by",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      {
        "name": "limit",
        "in": "query",
        "description": "how many Records to view",
        "required": false,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all Questions.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "400": {
          "description": "UnexpectedClientErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "404": {
          "description": "Records not found.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    },
    "post": {
      "tags": [
        "questions"
      ],
      "summary": "Create a new Question",
      "operationId": "createQuestions",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "body",
        "name": "Question",
        "description": "The Question you want to create.",
        "required": true,
        "schema": {
          "$ref": "#/definitions/Questions"
        }
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "201": {
          "description": "New Question is created.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "401": {
          "description": "Authentication Is Failed..",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "403": {
          "description": "No token provided.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/questions/{id}": {
    "get": {
      "tags": [
        "questions"
      ],
      "summary": "Lookup a specific Question",
      "operationId": "getByIdQuestions",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "id",
        "type": "number",
        "description": "The id of the Questions you want to lookup.",
        "required": true
      },
      {
        "name": "type",
        "in": "query",
        "description": "typeall for single id",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all Questions.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        }
      }
    },
    "put": {
      "tags": [
        "questions"
      ],
      "summary": "Update a Question",
      "operationId": "updateQuestions",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "id",
        "type": "number",
        "description": "The id of the Questions you want to update.",
        "required": true
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "in": "body",
        "name": "Questions",
        "description": "The Questions you want update with.",
        "required": false,
        "schema": {
          "$ref": "#/definitions/Message"
        }
      }
      ],
      "responses": {
        "200": {
          "description": "The Questions has been successfully updated.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        }
      }
    },
    "delete": {
      "tags": [
        "questions"
      ],
      "summary": "Delete a Questions",
      "operationId": "removeQuestions",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "id",
        "type": "number",
        "description": "The id of the Questions you want to update.",
        "required": true
      },
      {
        "name": "questiontype",
        "in": "query",
        "description": "delete using questiontype",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "204": {
          "description": "The Questions has been deleted.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        },
        "404": {
          "description": "Records not found to delete.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/subjects": {
    "get": {
      "tags": [
        "subjects"
      ],
      "summary": "List all subjects",
      "operationId": "getsubjects",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "categoryid",
        "in": "query",
        "description": "filter by categoryid",
        "required": false,
        "type": "array",
        "items": {
          "type": "integer"
        }
      },
      {
        "name": "name",
        "in": "query",
        "description": "filter by name",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      {
        "name": "limit",
        "in": "query",
        "description": "limit",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      {
        "name": "page",
        "in": "query",
        "description": "filter by page",
        "required": false,
        "type": "array",
        "items": {
          "type": "integer"
        }
      },
      {
        "name": "type",
        "in": "query",
        "description": "Get By typeall",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      {
        "name": "sort",
        "in": "query",
        "description": "sort by",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all subjects.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "400": {
          "description": "UnexpectedClientErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "404": {
          "description": "Records not found.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    },
    "post": {
      "tags": [
        "subjects"
      ],
      "summary": "Create a new subjects",
      "operationId": "createsubjects",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "body",
        "name": "subjects",
        "description": "The subjects you want to create.",
        "required": true,
        "schema": {
          "$ref": "#/definitions/Ts_Subjects"
        }
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "201": {
          "description": "New subjects is created.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "401": {
          "description": "Authentication Is Failed..",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "403": {
          "description": "No token provided.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/signals": {
    "get": {
      "tags": [
        "signals"
      ],
      "summary": "List all signals",
      "operationId": "getsignal",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "e",
        "in": "query",
        "description": "filter by e",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      {
        "name": "qT",
        "in": "query",
        "description": "filter by qT",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      {
        "name": "cId",
        "in": "query",
        "description": "filter by cId",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      {
        "name": "browser",
        "in": "query",
        "description": "filter by browser",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      {
        "name": "subject",
        "in": "query",
        "description": "filter by subject",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      {
        "name": "level",
        "in": "query",
        "description": "filter by level",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      {
        "name": "q",
        "in": "query",
        "description": "filter by q",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      {
        "name": "ca",
        "in": "query",
        "description": "filter by ca",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      {
        "name": "tt",
        "in": "query",
        "description": "filter by tt",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      {
        "name": "compliedOrNot",
        "in": "query",
        "description": "filter by compliedOrNot",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      {
        "name": "attempted",
        "in": "query",
        "description": "filter by attempted",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      {
        "name": "questionId",
        "in": "query",
        "description": "filter by questionId",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      {
        "name": "time",
        "in": "query",
        "description": "filter by time",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all subjects.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "400": {
          "description": "UnexpectedClientErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "404": {
          "description": "Records not found.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/subjects/{id}": {
    "get": {
      "tags": [
        "subjects"
      ],
      "summary": "Lookup a specific subjects",
      "operationId": "getByIdsubjects",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "id",
        "type": "number",
        "description": "The id of the subjects you want to lookup.",
        "required": true
      },
      {
        "name": "type",
        "in": "query",
        "description": "typeall for single id",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all subjects.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        }
      }
    },
    "put": {
      "tags": [
        "subjects"
      ],
      "summary": "Update a subjects",
      "operationId": "updatesubjects",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "id",
        "type": "number",
        "description": "The id of the subjects you want to update.",
        "required": true
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "in": "body",
        "name": "subjects",
        "description": "The subjects you want update with.",
        "required": false,
        "schema": {
          "$ref": "#/definitions/Message"
        }
      }
      ],
      "responses": {
        "200": {
          "description": "The subjects has been successfully updated.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        }
      }
    },
    "delete": {
      "tags": [
        "subjects"
      ],
      "summary": "Delete a subjects",
      "operationId": "removesubjects",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "id",
        "type": "number",
        "description": "The id of the subjects you want to update.",
        "required": true
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "204": {
          "description": "The subjects has been deleted.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        },
        "404": {
          "description": "Records not found to delete.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/users/reviews/{id}": {
    "get": {
      "tags": [
        "userReviews"
      ],
      "summary": "Lookup a specific UserReviews",
      "operationId": "UserReviewsgetById",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "id",
        "type": "number",
        "description": "The id of the UserReviews you want to lookup.",
        "required": true
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all UserReviews.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        }
      }
    },
    "put": {
      "tags": [
        "userReviews"
      ],
      "summary": "Update a UserReviews",
      "operationId": "UserReviewsupdate",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "id",
        "type": "number",
        "description": "The id of the UserReviews you want to update.",
        "required": true
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "in": "body",
        "name": "UserReviews",
        "description": "The UserReviews you want update with.",
        "required": false,
        "schema": {
          "$ref": "#/definitions/Message"
        }
      }
      ],
      "responses": {
        "200": {
          "description": "The UserReviews has been successfully updated.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        }
      }
    },
    "delete": {
      "tags": [
        "userReviews"
      ],
      "summary": "Delete a UserReviews",
      "operationId": "UserReviewsremove",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "id",
        "type": "number",
        "description": "The id of the UserReviews you want to update.",
        "required": true
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "204": {
          "description": "The UserReviews has been deleted.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        },
        "404": {
          "description": "Records not found to delete.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/video/questions": {
    "get": {
      "tags": [
        "videoQuestions"
      ],
      "summary": "List all Video_Questions",
      "operationId": "getvideoQuestions",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "subjectid",
        "in": "query",
        "description": "filter by subjectid",
        "required": false,
        "type": "array",
        "items": {
          "type": "integer"
        }
      },
      {
        "name": "levelid",
        "in": "query",
        "description": "filter by levelid",
        "required": false,
        "type": "array",
        "items": {
          "type": "integer"
        }
      },
      {
        "name": "type",
        "in": "query",
        "description": "Get By typeall",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      {
        "name": "name",
        "in": "query",
        "description": "filter by name",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      {
        "name": "sort",
        "in": "query",
        "description": "sort by",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      {
        "name": "limit",
        "in": "query",
        "description": "how many Records to view",
        "required": false,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all Video_Questions.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "400": {
          "description": "UnexpectedClientErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "404": {
          "description": "Records not found.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    },
    "post": {
      "tags": [
        "videoQuestions"
      ],
      "summary": "Create a new VideoQuestion",
      "operationId": "createvideoQuestions",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "body",
        "name": "Video_Question",
        "description": "The Video_Question you want to create.",
        "required": true,
        "schema": {
          "$ref": "#/definitions/Video_Questions"
        }
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "201": {
          "description": "New VideoQuestion is created.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "401": {
          "description": "Authentication Is Failed..",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "403": {
          "description": "No token provided.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/video/questions/{id}": {
    "get": {
      "tags": [
        "videoQuestions"
      ],
      "summary": "Lookup a specific Video_Question",
      "operationId": "getByIdvideoQuestions",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "id",
        "type": "number",
        "description": "The id of the Video_Questions you want to lookup.",
        "required": true
      },
      {
        "name": "type",
        "in": "query",
        "description": "typeall for single id",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all Choice_Questions.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        }
      }
    },
    "put": {
      "tags": [
        "videoQuestions"
      ],
      "summary": "Update a Video_Question",
      "operationId": "updatevideoQuestions",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "id",
        "type": "number",
        "description": "The id of the Video_Questions you want to update.",
        "required": true
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "in": "body",
        "name": "Video_Questions",
        "description": "The Video_Questions you want update with.",
        "required": false,
        "schema": {
          "$ref": "#/definitions/Message"
        }
      }
      ],
      "responses": {
        "200": {
          "description": "The Video_Questions has been successfully updated.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        }
      }
    },
    "delete": {
      "tags": [
        "videoQuestions"
      ],
      "summary": "Delete a Video_Questions",
      "operationId": "removevideoQuestions",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "id",
        "type": "number",
        "description": "The id of the Video_Questions you want to update.",
        "required": true
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "204": {
          "description": "The Video_Questions has been deleted.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        },
        "404": {
          "description": "Records not found to delete.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/utils/resumes": {
    "post": {
      "tags": [
        "resume"
      ],
      "summary": "Create a new resume",
      "operationId": "Createresume",
      "consumes": [
        "multipart/form-data"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "file",
        "in": "formData",
        "description": "The uploaded file data",
        "required": true,
        "type": "file"
      },
      {
        "name": "key",
        "in": "formData",
        "description": "key for resume",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "201": {
          "description": "New resume is posted.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "401": {
          "description": "Authentication Is Failed..",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "403": {
          "description": "No token provided.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/organizations": {
    "get": {
      "tags": [
        "organization"
      ],
      "summary": "List all Otganization",
      "operationId": "getorganizations",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "limit",
        "in": "query",
        "description": "how many Records to view",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "name": "sort",
        "in": "query",
        "description": "sort by different fields",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      {
        "name": "name",
        "in": "query",
        "description": "search by Name",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      {
        "name": "location",
        "in": "query",
        "description": "search by Location",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      {
        "name": "industry",
        "in": "query",
        "description": "search by industry",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      {
        "name": "url",
        "in": "query",
        "description": "search by url",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      {
        "name": "domain",
        "in": "query",
        "description": "search by domain",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      {
        "name": "q",
        "in": "query",
        "description": "search by keyword",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all Video_Questions.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "400": {
          "description": "UnexpectedClientErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "404": {
          "description": "Records not found.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    },
    "post": {
      "tags": [
        "organization"
      ],
      "summary": "Create a new organization",
      "operationId": "createorganizations",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "body",
        "name": "organization",
        "description": "The organization you want to create.",
        "required": true,
        "schema": {
          "$ref": "#/definitions/organizations"
        }
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "201": {
          "description": "New candidates is created.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "401": {
          "description": "Authentication Is Failed..",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "403": {
          "description": "No token provided.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/organizations/{organization_id}": {
    "get": {
      "tags": [
        "organization"
      ],
      "summary": "get data by id",
      "operationId": "get by organization_id",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "organization_id",
        "type": "string",
        "description": "The id of the organization you want to lookup.",
        "required": true
      },
      {
        "in": "header",
        "name": "x-access-token",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all candidates.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        }
      }
    },
    "put": {
      "tags": [
        "organization"
      ],
      "summary": "Update a organization",
      "operationId": "updateorganization",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "organization_id",
        "type": "string",
        "description": "The id of the organization you want to update.",
        "required": true
      },
      {
        "in": "header",
        "name": "x-access-token",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "in": "body",
        "name": "candidates",
        "description": "The organization you want update with.",
        "required": false,
        "schema": {
          "$ref": "#/definitions/organizations"
        }
      }
      ],
      "responses": {
        "200": {
          "description": "The organization has been successfully updated.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        }
      }
    },
    "delete": {
      "tags": [
        "organization"
      ],
      "summary": "Delete a organization",
      "operationId": "removeorganization",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "organization_id",
        "type": "string",
        "description": "The id of the organization you want to update.",
        "required": true
      },
      {
        "in": "header",
        "name": "x-access-token",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "204": {
          "description": "The organization has been deleted.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        },
        "404": {
          "description": "Records not found to delete.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/cards": {
    "get": {
      "tags": [
        "cards"
      ],
      "summary": "Home cards",
      "operationId": "getcards",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all Video_Questions.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "400": {
          "description": "UnexpectedClientErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "404": {
          "description": "Records not found.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/employers/{employee_id}/cards/{dashboard}": {
    "get": {
      "tags": [
        "cards"
      ],
      "summary": "Employer cards",
      "operationId": "empCardsDashboard",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "dashboard",
        "enum": [
          "interviews",
          "jobs",
          "library"
        ],
        "description": "which dashboad to display.",
        "type": "string",
        "required": true
      },
      {
        "in": "path",
        "name": "employee_id",
        "type": "string",
        "description": "The id of the candidates you want to lookup.",
        "required": true
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all candidates.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        }
      }
    }
  },
  "/candidates/{candidate_id}/cards/{dashboard}": {
    "get": {
      "tags": [
        "cards"
      ],
      "summary": "Candidate cards",
      "operationId": "candidateCardsDashboard",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "dashboard",
        "enum": [
          "interviews",
          "jobs",
          "challenge"
        ],
        "description": "which dashboad to display.",
        "type": "string",
        "required": true
      },
      {
        "in": "path",
        "name": "candidate_id",
        "type": "string",
        "description": "The id of the candidates you want to lookup.",
        "required": true
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all candidates.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        }
      }
    }
  },
  "/static_questions": {
    "get": {
      "tags": [
        "staticQuestions"
      ],
      "summary": "static questions",
      "operationId": "static questions",
      "produces": [
        "application/json"
      ],
      "responses": {
        "200": {
          "description": "An array with all static questions.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "400": {
          "description": "UnexpectedClientErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "404": {
          "description": "Records not found.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    },
    "post": {
      "tags": [
        "staticQuestions"
      ],
      "summary": "Create a new staticQuestion",
      "operationId": "createstaticQuestions",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "body",
        "name": "staticQuestion",
        "description": "The Question you want to create.",
        "required": true,
        "schema": {
          "$ref": "#/definitions/staticQuestion"
        }
      }
      ],
      "responses": {
        "201": {
          "description": "New candidates is created.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "401": {
          "description": "Authentication Is Failed..",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "403": {
          "description": "No token provided.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/static_questions/{id}": {
    "get": {
      "tags": [
        "staticQuestions"
      ],
      "summary": "get a specific staticQuestions",
      "operationId": "staticQuestionsById",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "id",
        "type": "string",
        "description": "please provide employee id.",
        "required": true
      },
      {
        "name": "subjectid",
        "in": "query",
        "description": "subjectid of static_questions",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "name": "quiztype",
        "in": "query",
        "description": "subjectid of static_questions",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "name": "levelid",
        "in": "query",
        "description": "subjectid of static_questions",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "name": "quizLimit",
        "in": "query",
        "description": "subjectid of static_questions",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all candidates.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        }
      }
    },
    "put": {
      "tags": [
        "staticQuestions"
      ],
      "summary": "Update a staticQuestions",
      "operationId": "UpdateStaticQuestions",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "id",
        "type": "string",
        "description": "please provide staticQuestion id. you want to update.",
        "required": true
      },
      {
        "in": "body",
        "name": "staticQuestion",
        "description": "The staticQuestion you want update with.",
        "required": true,
        "schema": {
          "$ref": "#/definitions/staticQuestion"
        }
      }
      ],
      "responses": {
        "200": {
          "description": "The candidates has been successfully updated.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        }
      }
    },
    "delete": {
      "tags": [
        "staticQuestions"
      ],
      "summary": "Delete a staticQuestions",
      "operationId": "removeStaticQuestion",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "id",
        "type": "string",
        "description": "please provide staticQuestion id that you want to delete.",
        "required": true
      }
      ],
      "responses": {
        "204": {
          "description": "The candidates has been deleted.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        },
        "404": {
          "description": "Records not found to delete.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/autocomplete": {
    "get": {
      "tags": [
        "autocomplete"
      ],
      "summary": "autocomplete skills, organizations & designation",
      "operationId": "get autocomplete data",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "limit",
        "in": "query",
        "description": "how many data to view",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "name": "q",
        "in": "query",
        "description": "please enter some data to autocomplete",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all autocomplete.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "400": {
          "description": "UnexpectedClientErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "404": {
          "description": "Records not found.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/lookup/country/currencies": {
    "get": {
      "tags": [
        "lookupCountryCurrencies"
      ],
      "summary": "lookup Country Currencies",
      "operationId": "getLookupCountryCurrencies",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "limit",
        "in": "query",
        "description": "how many data to view",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "name": "sort",
        "in": "query",
        "type": "string",
        "enum": [
          "id",
          "country_id",
          "salaryunit_id",
          "code",
          "lastmoduserid",
          "lastmoddatetime"
        ],
        "description": "sort by different fields.",
        "required": true
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all lookupCountryCurrencies.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "400": {
          "description": "UnexpectedClientErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "404": {
          "description": "Records not found.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    },
    "post": {
      "tags": [
        "lookupCountryCurrencies"
      ],
      "summary": "Create a new lookupCountryCurrencie",
      "operationId": "postLookupCountryCurrencies",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "in": "body",
        "name": "staticQuestion",
        "description": "The Currencie you want to create.",
        "required": true,
        "schema": {
          "$ref": "#/definitions/lookupCountryCurrencies"
        }
      }
      ],
      "responses": {
        "201": {
          "description": "New Currencie is created.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "401": {
          "description": "Authentication Is Failed..",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "403": {
          "description": "No token provided.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/lookup/country/currencies/{id}": {
    "get": {
      "tags": [
        "lookupCountryCurrencies"
      ],
      "summary": "lookup Country Currencies",
      "operationId": "getByIdCountryCurrencies",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "id",
        "in": "path",
        "description": "get by id",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all lookupCountryCurrencies.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "400": {
          "description": "UnexpectedClientErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "404": {
          "description": "Records not found.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    },
    "put": {
      "tags": [
        "lookupCountryCurrencies"
      ],
      "summary": "Update a new lookupCountryCurrencie",
      "operationId": "updateCountryCurrencies",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "name": "id",
        "in": "path",
        "description": "update by id",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "in": "body",
        "name": "staticQuestion",
        "description": "The Currencie you want to create.",
        "required": true,
        "schema": {
          "$ref": "#/definitions/lookupCountryCurrencies"
        }
      }
      ],
      "responses": {
        "201": {
          "description": "New Currencie is created.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "401": {
          "description": "Authentication Is Failed..",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "403": {
          "description": "No token provided.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    },
    "delete": {
      "tags": [
        "lookupCountryCurrencies"
      ],
      "summary": "lookup Country Currencies",
      "operationId": "deleteCountryCurrencies",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "name": "id",
        "in": "path",
        "description": "delete by id",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all lookupCountryCurrencies.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "400": {
          "description": "UnexpectedClientErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "404": {
          "description": "Records not found.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/jobapplications": {
    "get": {
      "tags": [
        "jobapplications"
      ],
      "summary": "List all job_Applications",
      "operationId": "getjobApplications",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "type": "string",
        "format": "string",
        "required": true
      },
      {
        "name": "limit",
        "in": "query",
        "description": "how many Records to view",
        "type": "string",
        "format": "string",
        "required": true
      },
      {
        "name": "candidateId",
        "in": "query",
        "description": "filter by country",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      {
        "name": "jobId",
        "in": "query",
        "description": "filter by symbol",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      {
        "name": "resumeId",
        "in": "query",
        "description": "filter by name",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all job_Applications.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "204": {
          "description": "Records not found.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "400": {
          "description": "UnexpectedClientErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    },
    "post": {
      "tags": [
        "jobapplications"
      ],
      "summary": "Create a new job_Applications",
      "operationId": "createjobApplications",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "body",
        "name": "jobApplications",
        "description": "The jobApplications you want to create.",
        "required": true,
        "schema": {
          "$ref": "#/definitions/job_applications"
        }
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "201": {
          "description": "New jobApplications is created.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "401": {
          "description": "Authentication Is Failed..",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "403": {
          "description": "No token provided.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/jobapplications/{_id}":{
    "get": {
      "tags": [
        "jobapplications"
      ],
      "summary": "List all job_Applications",
      "operationId": "getJobApplicationsById",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "name": "_id",
        "in": "path",
        "description": "The id of the audioQuestions you want to lookup.",
        "type": "number",
        "format": "string",
        "required": true
      },
      {
        "name": "candidateId",
        "in": "query",
        "description": "how many Records to view",
        "type": "string",
        "format": "string",
        "required": true
      },
      {
        "name": "jobId",
        "in": "query",
        "description": "filter by country",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      {
        "name": "resumeId",
        "in": "query",
        "description": "filter by symbol",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all job_Applications.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "204": {
          "description": "Records not found.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "400": {
          "description": "UnexpectedClientErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    },
    "put": {
      "tags": [
        "jobapplications"
      ],
      "summary": "The jobapplications has been successfully updated.",
      "operationId": "updateJobApplications",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "body",
        "name": "jobApplications",
        "description": "The jobApplications you want to create.",
        "required": true,
        "schema": {
          "$ref": "#/definitions/job_applications"
        }
      },
      {
        "name": "_id",
        "in": "path",
        "description": "The id of the jobApplications you want to lookup.",
        "type": "number",
        "format": "string",
        "required": true
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "201": {
          "description": "New jobApplications is created.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "401": {
          "description": "Authentication Is Failed..",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "403": {
          "description": "No token provided.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    },
    "delete": {
      "tags": [
        "jobapplications"
      ],
      "summary": "Delete a jobapplications",
      "operationId": "removeJobapplications",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "_id",
        "in": "path",
        "description": "The id of the jobApplications you want to lookup.",
        "type": "number",
        "format": "string",
        "required": true
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "204": {
          "description": "The jobapplications has been deleted.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        },
        "404": {
          "description": "Records not found to delete.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/categories": {
    "get": {
      "tags": [
        "categories"
      ],
      "summary": "List all categories",
      "operationId": "getCategories",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "limit",
        "in": "query",
        "description": "how many Records to view",
        "type": "string",
        "format": "string",
        "required": true
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all categories.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "204": {
          "description": "Records not found.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "400": {
          "description": "UnexpectedClientErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/lookup/currencies": {
    "get": {
      "tags": [
        "lookupCurrencies"
      ],
      "summary": "List all lookup_Currencies",
      "operationId": "getlookupCurrencies",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "limit",
        "in": "query",
        "description": "how many Records to view",
        "type": "string",
        "format": "string",
        "required": true
      },
      {
        "name": "country",
        "in": "query",
        "description": "filter by country",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      {
        "name": "symbol",
        "in": "query",
        "description": "filter by symbol",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      {
        "name": "name",
        "in": "query",
        "description": "filter by name",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      {
        "name": "code",
        "in": "query",
        "description": "filter by code",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all choice_Questions.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "204": {
          "description": "Records not found.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "400": {
          "description": "UnexpectedClientErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }},
  "/analytics_question":{
    "get": {
      "tags": [
        "analyticsQuestion"
      ],
      "summary": "List all analytics_question",
      "operationId": "getanalytics_question",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "subjectid",
        "in": "query",
        "description": "filter by subjectid",
        "required": false,
        "type": "array",
        "items": {
          "type": "integer"
        }
      },
      {
        "name": "questionid",
        "in": "query",
        "description": "filter by questionid",
        "required": false,
        "type": "array",
        "items": {
          "type": "integer"
        }
      },
      {
        "name": "levelid",
        "in": "query",
        "description": "filter by levelid",
        "required": false,
        "type": "array",
        "items": {
          "type": "integer"
        }
      },
      {
        "name": "count",
        "in": "query",
        "description": "filter by code",
        "required": false,
        "type": "array",
        "items": {
          "type": "integer"
        }
      },
      {
        "name": "review",
        "in": "query",
        "description": "filter by reviewDone",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      },{
        "name": "sort",
        "in": "query",
        "description": "sort by",
        "required": false,
        "type": "string",
        "enum": [
          "id",
          "subjectid",
          "levelid",
          "questionid",
          "count",
          "Highest_average_time",
          "totaltime"
        ]
      },
      {
        "name": "questiontype",
        "in": "query",
        "description": "filter by questiontype",
        "required": false,
        "type": "string",
        "enum": [
          "audio",
          "video",
          "choice",
          "coding",
          "typed"
        ]
      },

      ],
      "responses": {
        "200": {
          "description": "An array with all analytics_question.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "204": {
          "description": "Records not found.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "400": {
          "description": "UnexpectedClientErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/common/terms": {
    "get": {
      "tags": [
        "commonTerms"
      ],
      "summary": "List all common_Terms",
      "operationId": "getcommonTerms",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "limit",
        "in": "query",
        "description": "how many Records to view",
        "type": "string",
        "format": "string",
        "required": false
      },
      {
        "name": "sort",
        "in": "query",
        "description": "how many Records to view",
        "type": "string",
        "required": false,
        "enum": [
          "name",
          "id",
          "lastmoddatetime"
        ]
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all common_Terms.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "204": {
          "description": "Records not found.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "400": {
          "description": "UnexpectedClientErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
    ,
    "post": {
      "tags": [
        "commonTerms"
      ],
      "summary": "Create a new commonTerms",
      "operationId": "createcommonTerms",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "body",
        "name": "body",
        "description": "The commonTerms you want to create.",
        "required": true,
        "schema": {
          "$ref": "#/definitions/common_Terms"
        }
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "201": {
          "description": "New commonTerms is created.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "401": {
          "description": "Authentication Is Failed..",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "403": {
          "description": "No token provided.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/common/terms/{id}": {
    "get": {
      "tags": [
        "commonTerms"
      ],
      "summary": "common a specific commonterms",
      "operationId": "getByIdcommonterms",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "id",
        "type": "number",
        "description": "The id of the commonterms you want to common.",
        "required": true
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all commonterms.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        }
      }
    },
    "put": {
      "tags": [
        "commonTerms"
      ],
      "summary": "Update a commonterms",
      "operationId": "updatecommonterms",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "id",
        "type": "number",
        "description": "The id of the commonterms you want to update.",
        "required": true
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "in": "body",
        "name": "body",
        "description": "The commonterms you want update with.",
        "required": false,
        "schema": {
          "$ref": "#/definitions/common_Terms"
        }
      }
      ],
      "responses": {
        "200": {
          "description": "The commonterms has been successfully updated.",
          "schema": {
            "$ref": "#/definitions/common_Terms"
          }
        }
      }
    },
    "delete": {
      "tags": [
        "commonTerms"
      ],
      "summary": "Delete a commonterms",
      "operationId": "removecommonterms",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "id",
        "type": "number",
        "description": "The id of the commonterms you want to update.",
        "required": true
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "204": {
          "description": "The commonterms has been deleted.",
          "schema": {
            "$ref": "#/definitions/common_Terms"
          }
        },
        "404": {
          "description": "Records not found to delete.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/common_Terms"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/common_Terms"
            }
          }
        }
      }
    }
  },
  "/typed/questions": {
    "get": {
      "tags": [
        "typedQuestions"
      ],
      "summary": "about typed questions",
      "operationId": "getTypedQuestions",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "subjectid",
        "in": "query",
        "description": "filter by subjectid",
        "required": false,
        "type": "string",
        "format": "string"
      },
      {
        "name": "question",
        "in": "query",
        "description": "filter by question",
        "required": false,
        "type": "string",
        "format": "string"
      },
      {
        "name": "review",
        "in": "query",
        "description": "filter by reviewDone",
        "required": false,
        "type": "string",
        "format": "string"
      },
      {
        "name": "levelid",
        "in": "query",
        "description": "filter by levelid",
        "required": false,
        "type": "string",
        "format": "string"
      },
      {
        "name": "randomQuiz",
        "in": "query",
        "description": "filter by randomQuiz",
        "required": false,
        "type": "string",
        "format": "string"
      },
      {
        "name": "start",
        "in": "query",
        "description": "start",
        "required": false,
        "type": "integer",
        "format": "string"
      },
      {
        "name": "limit",
        "in": "query",
        "description": "limit",
        "required": false,
        "type": "integer",
        "format": "string"
      },
      {
        "name": "sort",
        "in": "query",
        "type": "string",
        "enum": [
          "id",
          "subjectid",
          "levelid",
          "lastmoddatetime",
          "time"
        ],
        "description": "sort by different fields.",
        "required": true
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all typedQuestions.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "400": {
          "description": "UnexpectedClientErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "404": {
          "description": "Records not found.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    },
    "post": {
      "tags": [
        "typedQuestions"
      ],
      "summary": "Create a new typedQuestions",
      "operationId": "PostTypedQuestions",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "x-access-token",
        "in": "header",
        "description": "x-access-token",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "in": "body",
        "name": "typedQuestions",
        "description": "The typedQuestion you want to create.",
        "required": true,
        "schema": {
          "$ref": "#/definitions/typedQuestions"
        }
      }
      ],
      "responses": {
        "201": {
          "description": "New Currencie is created.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "401": {
          "description": "Authentication Is Failed..",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "403": {
          "description": "No token provided.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/typed/questions/{id}": {
    "get": {
      "tags": [
        "typedQuestions"
      ],
      "summary": "about typed questions",
      "operationId": "getByIdTypedQuestions",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": id,
        "in": "path",
        "type": integer,
        "description": "get data based on id",
        "required": true
      }
      ],
      "responses": {
        "200": {
          "description": "An object with given id.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "400": {
          "description": "UnexpectedClientErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "404": {
          "description": "Records not found.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    },
    "put": {
      "tags": [
        "typedQuestions"
      ],
      "summary": "Create a new typedQuestions",
      "operationId": "updateByIdTypedQuestions",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "x-access-token",
        "in": "header",
        "description": "x-access-token",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "name": id,
        "in": "path",
        "type": integer,
        "description": "get data based on id",
        "required": true
      },
      {
        "in": "body",
        "name": "typedQuestions",
        "description": "The typedQuestion you want to create.",
        "required": true,
        "schema": {
          "$ref": "#/definitions/typedQuestions"
        }
      }
      ],
      "responses": {
        "201": {
          "description": "New Currencie is created.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "401": {
          "description": "Authentication Is Failed..",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "403": {
          "description": "No token provided.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    },
    "delete": {
      "tags": [
        "typedQuestions"
      ],
      "summary": "about typed questions",
      "operationId": "deleteByIdTypedQuestions",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "x-access-token",
        "in": "header",
        "description": "x-access-token",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "name": id,
        "in": "path",
        "type": integer,
        "description": "delete data based on id",
        "required": true
      }
      ],
      "responses": {
        "200": {
          "description": "An object with given id.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "400": {
          "description": "UnexpectedClientErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "404": {
          "description": "Records not found.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/whiteboard/questions": {
    "get": {
      "tags": [
        "whiteboardQuestions"
      ],
      "summary": "about whiteboardQuestions",
      "operationId": "getWhiteboardQuestions",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "question",
        "in": "query",
        "description": "filter by question",
        "required": false,
        "type": "string",
        "format": "string"
      },
      {
        "name": "levelid",
        "in": "query",
        "description": "filter by levelid",
        "required": false,
        "type": "string",
        "format": "string"
      },
      {
        "name": "review",
        "in": "query",
        "description": "filter by reviewDon",
        "required": false,
        "type": "string",
        "format": "string"
      },
      {
        "name": "subjectid",
        "in": "query",
        "description": "filter by subjectid",
        "required": false,
        "type": "string",
        "format": "string"
      },
      {
        "name": "randomQuiz",
        "in": "query",
        "description": "filter by randomQuiz",
        "required": false,
        "type": "string",
        "format": "string"
      },
      {
        "name": "start",
        "in": "query",
        "description": "start",
        "required": false,
        "type": "integer",
        "format": "string"
      },
      {
        "name": "limit",
        "in": "query",
        "description": "limit",
        "required": false,
        "type": "integer",
        "format": "string"
      },
      {
        "name": "sort",
        "in": "query",
        "type": "string",
        "enum": [
          "id",
          "subjectid",
          "levelid",
          "lastmoddatetime",
          "time"
        ],
        "description": "sort by different fields.",
        "required": true
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all whiteboardQuestions.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "400": {
          "description": "UnexpectedClientErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "404": {
          "description": "Records not found.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    },
    "post": {
      "tags": [
        "whiteboardQuestions"
      ],
      "summary": "Create a new whiteboardQuestions",
      "operationId": "postWhiteboardQuestions",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "x-access-token",
        "in": "header",
        "description": "x-access-token",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "in": "body",
        "name": "typedQuestions",
        "description": "The whiteboardQuestions you want to create.",
        "required": true,
        "schema": {
          "$ref": "#/definitions/whiteboardQuestions"
        }
      }
      ],
      "responses": {
        "201": {
          "description": "New whiteboardQuestions is created.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "401": {
          "description": "Authentication Is Failed..",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "403": {
          "description": "No token provided.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/whiteboard/questions/{id}": {
    "get": {
      "tags": [
        "whiteboardQuestions"
      ],
      "summary": "about whiteboardQuestions",
      "operationId": "getByIdWhiteboardQuestions",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": id,
        "in": "path",
        "type": integer,
        "description": "get data based on id",
        "required": true
      }
      ],
      "responses": {
        "200": {
          "description": "An object with given id.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "400": {
          "description": "UnexpectedClientErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "404": {
          "description": "Records not found.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    },
    "put": {
      "tags": [
        "whiteboardQuestions"
      ],
      "summary": "Create a new whiteboardQuestions",
      "operationId": "updateWhiteboardQuestions",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "x-access-token",
        "in": "header",
        "description": "x-access-token",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "name": id,
        "in": "path",
        "type": integer,
        "description": "get data based on id",
        "required": true
      },
      {
        "in": "body",
        "name": "typedQuestions",
        "description": "The typedQuestion you want to create.",
        "required": true,
        "schema": {
          "$ref": "#/definitions/whiteboardQuestions"
        }
      }
      ],
      "responses": {
        "201": {
          "description": "New whiteboardQuestions is created.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "401": {
          "description": "Authentication Is Failed..",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "403": {
          "description": "No token provided.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    },
    "delete": {
      "tags": [
        "whiteboardQuestions"
      ],
      "summary": "about whiteboardQuestions",
      "operationId": "deleteWhiteboardQuestions",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "x-access-token",
        "in": "header",
        "description": "x-access-token",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "name": id,
        "in": "path",
        "type": integer,
        "description": "delete data based on id",
        "required": true
      }
      ],
      "responses": {
        "200": {
          "description": "An object with given id.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "400": {
          "description": "UnexpectedClientErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "404": {
          "description": "Records not found.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/lookup/designations": {
    "get": {
      "tags": [
        "lookupDesignations"
      ],
      "summary": "about lookupDesignations",
      "operationId": "getLookupDesignations",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "name",
        "in": "query",
        "description": "filter by name",
        "required": false,
        "type": "string",
        "format": "string"
      },
      {
        "name": "flag",
        "in": "query",
        "description": "filter by flag",
        "required": false,
        "type": "string",
        "format": "string"
      },
      {
        "name": "lastmoddatetime",
        "in": "query",
        "description": "filter by lastmoddatetime",
        "required": false,
        "type": "string",
        "format": "string"
      },
      {
        "name": "start",
        "in": "query",
        "description": "start",
        "required": false,
        "type": "integer",
        "format": "string"
      },
      {
        "name": "limit",
        "in": "query",
        "description": "how many data to view",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "name": "sort",
        "in": "query",
        "type": "string",
        "enum": [
          "id",
          "name",
          "lastmoddatetime"
        ],
        "description": "sort by different fields.",
        "required": true
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all audioQuestions.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "400": {
          "description": "UnexpectedClientErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "404": {
          "description": "Records not found.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    },
    "post": {
      "tags": [
        "lookupDesignations"
      ],
      "summary": "Create a new lookupDesignations",
      "operationId": "postLookupDesignations",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "x-access-token",
        "in": "header",
        "description": "x-access-token",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "in": "body",
        "name": "lookupDesignations",
        "description": "The lookupDesignations you want to create.",
        "required": true,
        "schema": {
          "$ref": "#/definitions/lookupDesignations"
        }
      }
      ],
      "responses": {
        "201": {
          "description": "New lookupDesignations is created.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "401": {
          "description": "Authentication Is Failed..",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "403": {
          "description": "No token provided.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/lookup/designations/{id}": {
    "get": {
      "tags": [
        "lookupDesignations"
      ],
      "summary": "about lookupDesignations",
      "operationId": "getByIdLookupDesignations",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "id",
        "in": "path",
        "description": "get data based on id",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "200": {
          "description": "an object get by id",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "400": {
          "description": "UnexpectedClientErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "404": {
          "description": "Records not found.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    },
    "put": {
      "tags": [
        "lookupDesignations"
      ],
      "summary": "Create a new lookupDesignations",
      "operationId": "updateByIdLookupDesignations",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "id",
        "in": "path",
        "description": "get data based on id",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "x-access-token",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "in": "body",
        "name": "lookupDesignations",
        "description": "The lookupDesignations you want to create.",
        "required": true,
        "schema": {
          "$ref": "#/definitions/lookupDesignations"
        }
      }
      ],
      "responses": {
        "201": {
          "description": "New lookupDesignations is created.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "401": {
          "description": "Authentication Is Failed..",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "403": {
          "description": "No token provided.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    },
    "delete": {
      "tags": [
        "lookupDesignations"
      ],
      "summary": "delete a new lookupDesignations",
      "operationId": "deleteByIdLookupDesignations",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "id",
        "in": "path",
        "description": "delete data based on id",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "x-access-token",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "204": {
          "description": "delete lookupDesignations by id.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "401": {
          "description": "Authentication Is Failed..",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "403": {
          "description": "No token provided.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/lookup/salaryunits": {
    "get": {
      "tags": [
        "lookupSalaryunits"
      ],
      "summary": "about lookupSalaryunits",
      "operationId": "getLookupSalaryunits",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "name",
        "in": "query",
        "description": "filter by name",
        "required": false,
        "type": "string",
        "format": "string"
      },
      {
        "name": "code",
        "in": "query",
        "description": "filter by code",
        "required": false,
        "type": "string",
        "format": "string"
      },
      {
        "name": "lastmoddatetime",
        "in": "query",
        "description": "filter by lastmoddatetime",
        "required": false,
        "type": "string",
        "format": "string"
      },
      {
        "name": "start",
        "in": "query",
        "description": "how many data to view",
        "required": false,
        "type": "string",
        "format": "string"
      },
      {
        "name": "limit",
        "in": "query",
        "description": "how many data to view",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "name": "sort",
        "in": "query",
        "type": "string",
        "enum": [
          "id",
          "name",
          "symbol",
          "symbol_name",
          "code",
          "lastmoddatetime"
        ],
        "description": "sort by different fields.",
        "required": true
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all lookup Salaryunits.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "400": {
          "description": "UnexpectedClientErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "404": {
          "description": "Records not found.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    },
    "post": {
      "tags": [
        "lookupSalaryunits"
      ],
      "summary": "Create a new lookupSalaryunits",
      "operationId": "postLookupSalaryunits",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "x-access-token",
        "in": "header",
        "description": "x-access-token",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "in": "body",
        "name": "lookupSalaryunits",
        "description": "The lookupDesignations you want to create.",
        "required": true,
        "schema": {
          "$ref": "#/definitions/lookupSalaryunits"
        }
      }
      ],
      "responses": {
        "201": {
          "description": "New lookupSalaryunits is created.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "401": {
          "description": "Authentication Is Failed..",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "403": {
          "description": "No token provided.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/lookup/salaryunits/{id}": {
    "get": {
      "tags": [
        "lookupSalaryunits"
      ],
      "summary": "about lookupSalaryunits",
      "operationId": "getByIdLookupSalaryunits",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "id",
        "in": "path",
        "description": "get data based on id",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "200": {
          "description": "an object get by id",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "400": {
          "description": "UnexpectedClientErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "404": {
          "description": "Records not found.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    },
    "put": {
      "tags": [
        "lookupSalaryunits"
      ],
      "summary": "Create a new lookupSalaryunits",
      "operationId": "updateLookupSalaryunits",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "id",
        "in": "path",
        "description": "get data based on id",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "x-access-token",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "in": "body",
        "name": "lookupSalaryunits",
        "description": "The lookupDesignations you want to create.",
        "required": true,
        "schema": {
          "$ref": "#/definitions/lookupSalaryunits"
        }
      }
      ],
      "responses": {
        "201": {
          "description": "New lookupDesignations is created.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "401": {
          "description": "Authentication Is Failed..",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "403": {
          "description": "No token provided.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    },
    "delete": {
      "tags": [
        "lookupSalaryunits"
      ],
      "summary": "delete a new lookupSalaryunits",
      "operationId": "deleteLookupSalaryunits",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "id",
        "in": "path",
        "description": "delete data based on id",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "x-access-token",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "204": {
          "description": "delete lookupSalaryunits by id.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "401": {
          "description": "Authentication Is Failed..",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "403": {
          "description": "No token provided.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/employers_subjects": {
    "get": {
      "tags": [
        "employersSubjects"
      ],
      "summary": "List all Employers Subjects",
      "operationId": "getEmployersSubjects",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "name": "limit",
        "in": "query",
        "description": "how many Records to view",
        "type": "string",
        "format": "string",
        "required": false
      },
      {
        "name": "name",
        "in": "query",
        "description": "about name",
        "type": "string",
        "format": "string",
        "required": false
      },
      {
        "name": "description",
        "in": "query",
        "description": "about description",
        "type": "string",
        "format": "string",
        "required": false
      },
      {
        "name": "empId",
        "in": "query",
        "description": "about empId",
        "type": "string",
        "format": "string",
        "required": false
      },
      {
        "name": "template",
        "in": "query",
        "description": "about template",
        "type": "string",
        "format": "string",
        "required": false
      },
      {
        "name": "sort",
        "in": "query",
        "description": "how many Records to view",
        "type": "string",
        "required": false,
        "enum": [
          "_id",
          "emp_id",
          "template",
          "codemirror_theme",
          "name",
          "lastmoddatetime"
        ]
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all employersSubjects.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/employers_subjects"
            }
          }
        },
        "204": {
          "description": "Records not found.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "400": {
          "description": "UnexpectedClientErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    },
    "post": {
      "tags": [
        "employersSubjects"
      ],
      "summary": "Create a new Employers Subjects",
      "operationId": "createEmployersSubjects",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "body",
        "name": "employers_subjects",
        "description": "The employersSubjects you want to create.",
        "required": true,
        "schema": {
          "$ref": "#/definitions/employers_subjects"
        }
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "201": {
          "description": "New commonTerms is created.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/employers_subjects"
            }
          }
        },
        "401": {
          "description": "Authentication Is Failed..",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "403": {
          "description": "No token provided.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/employers_subjects/{id}": {
    "get": {
      "tags": [
        "employersSubjects"
      ],
      "summary": "common a specific Employers Subjects",
      "operationId": "getByIdEmployersSubjects",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "id",
        "type": "number",
        "description": "The id of the employersSubjects you want to common.",
        "required": true
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all employersSubjects.",
          "schema": {
            "$ref": "#/definitions/employers_subjects"
          }
        }
      }
    },
    "put": {
      "tags": [
        "employersSubjects"
      ],
      "summary": "Update a Employers Subjects",
      "operationId": "updateEmployersSubjects",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "id",
        "type": "number",
        "description": "The id of the employersSubjects you want to update.",
        "required": true
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "in": "body",
        "name": "body",
        "description": "The employersSubjects you want update with.",
        "required": false,
        "schema": {
          "$ref": "#/definitions/employers_subjects"
        }
      }
      ],
      "responses": {
        "200": {
          "description": "The employersSubjects has been successfully updated.",
          "schema": {
            "$ref": "#/definitions/employers_subjects"
          }
        }
      }
    },
    "delete": {
      "tags": [
        "employersSubjects"
      ],
      "summary": "Delete a Employers Subjects",
      "operationId": "removeEmployersSubjects",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "id",
        "type": "number",
        "description": "The id of the employersSubjects you want to update.",
        "required": true
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "204": {
          "description": "The employersSubjects has been deleted.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        },
        "404": {
          "description": "Records not found to delete.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/common_Terms"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/common_Terms"
            }
          }
        }
      }
    }
  },
  "/employers_interviews": {
    "get": {
      "tags": [
        "employerInterviews"
      ],
      "summary": "List all Employer Interviews",
      "operationId": "getEmployerInterviews",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "name": "limit",
        "in": "query",
        "description": "how many Records to view",
        "type": "string",
        "format": "string",
        "required": false
      },
      {
        "name": "name",
        "in": "query",
        "description": "about name",
        "type": "string",
        "format": "string",
        "required": false
      },
      {
        "name": "description",
        "in": "query",
        "description": "about description",
        "type": "string",
        "format": "string",
        "required": false
      },
      {
        "name": "empId",
        "in": "query",
        "description": "about empId",
        "type": "string",
        "format": "string",
        "required": false
      },
      {
        "name": "template",
        "in": "query",
        "description": "about template",
        "type": "string",
        "format": "string",
        "required": false
      },
      {
        "name": "sort",
        "in": "query",
        "description": "how many Records to view",
        "type": "string",
        "required": false,
        "enum": [
          "_id",
          "emp_id",
          "template",
          "codemirror_theme",
          "name",
          "lastmoddatetime"
        ]
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all employerInterviews.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/employer_interviews"
            }
          }
        },
        "204": {
          "description": "Records not found.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "400": {
          "description": "UnexpectedClientErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    },
    "post": {
      "tags": [
        "employerInterviews"
      ],
      "summary": "Create a new Employers Interviews",
      "operationId": "createEmployerInterviews",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "body",
        "name": "employer_interviews",
        "description": "The employerInterviews you want to create.",
        "required": true,
        "schema": {
          "$ref": "#/definitions/employer_interviews"
        }
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "201": {
          "description": "New employerInterviews is created.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/employer_interviews"
            }
          }
        },
        "401": {
          "description": "Authentication Is Failed..",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "403": {
          "description": "No token provided.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/employers_interviews/{id}": {
    "get": {
      "tags": [
        "employerInterviews"
      ],
      "summary": "common a specific Employer Interviews",
      "operationId": "getByIdEmployerInterviews",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "in": "path",
        "name": "id",
        "type": "number",
        "description": "The id of the employerInterviews you want to common.",
        "required": true
      }
      ],
      "responses": {
        "200": {
          "description": "The employerInterviews has been successfully get.",
          "schema": {
            "$ref": "#/definitions/employer_interviews"
          }
        },
        "404": {
          "description": "Records not found to delete.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/common_Terms"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/common_Terms"
            }
          }
        }
      }
    },
    "put": {
      "tags": [
        "employerInterviews"
      ],
      "summary": "Update a Employer Interviews",
      "operationId": "updateEmployerInterviews",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "id",
        "type": "number",
        "description": "The id of the employerInterviews you want to update.",
        "required": true
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "in": "body",
        "name": "body",
        "description": "The employerInterviews you want update with.",
        "required": false,
        "schema": {
          "$ref": "#/definitions/employer_interviews"
        }
      }
      ],
      "responses": {
        "200": {
          "description": "The employerInterviews has been successfully updated.",
          "schema": {
            "$ref": "#/definitions/employer_interviews"
          }
        },
        "400": {
          "description": "Records not found to delete.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/common_Terms"
            }
          }
        },
        "404": {
          "description": "Records not found to delete.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/common_Terms"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/common_Terms"
            }
          }
        }
      }
    },
    "delete": {
      "tags": [
        "employerInterviews"
      ],
      "summary": "Delete a Employer Interviews",
      "operationId": "removeEmployerInterviews",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "id",
        "type": "number",
        "description": "The id of the employerInterviews you want to update.",
        "required": true
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "204": {
          "description": "The employerInterviews has been deleted.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        },
        "404": {
          "description": "Records not found to delete.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/common_Terms"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/common_Terms"
            }
          }
        }
      }
    }
  },
  "/employers_interviews/{id}/positions": {
    "get": {
      "tags": [
        "employerInterviews"
      ],
      "summary": "common a specific Employer Interviews",
      "operationId": "getEmployerInterviewsByIdPositions",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "in": "path",
        "name": "id",
        "type": "number",
        "description": "The id of the employerInterviews you want to common.",
        "required": true
      }
      ],
      "responses": {
        "200": {
          "description": "The employerInterviews has been successfully get.",
          "schema": {
            "$ref": "#/definitions/employer_interviews"
          }
        },
        "404": {
          "description": "Records not found to delete.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/common_Terms"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/common_Terms"
            }
          }
        }
      }
    }
  },
  "/employers_questions":{
    "get": {
      "tags": [
        "employersQuestions"
      ],
      "summary": "List all employers_Questions",
      "operationId": "get employers_Questions",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "name": "subject",
        "in": "query",
        "description": "filter by subjectid",
        "required": false,
        "type": "array",
        "items": {
          "type": "integer"
        }
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all employers_Questions.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/employers_questions"
            }
          }
        },
        "204": {
          "description": "Records not found.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "400": {
          "description": "UnexpectedClientErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    },
    "post": {
      "tags": [
        "employersQuestions"
      ],
      "summary": "Create a new employers_Questions",
      "operationId": "createemployers_Questions",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "body",
        "name": "employers_Questions",
        "description": "The employers_Questions you want to create.",
        "required": true,
        "schema": {
          "$ref": "#/definitions/employers_questions"
        }
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "201": {
          "description": "New employers_Questions is created.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/employers_questions"
            }
          }
        },
        "401": {
          "description": "Authentication Is Failed..",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "403": {
          "description": "No token provided.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }

  },
  "/employers_questions/{_id}":{
    "get": {
      "tags": [
        "employersQuestions"
      ],
      "summary": "get data by employers_Questions",
      "operationId": "get by employers_Questions _id",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "_id",
        "type": "string",
        "description": "The id of the questions you want to employers_questions.",
        "required": true
      },
      {
        "in": "header",
        "name": "x-access-token",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all employers_questions.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/employers_questions"
            }
          }
        },
        "400": {
          "description": "UnexpectedClientErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "404": {
          "description": "Records not found.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    },
    "put": {
      "tags": [
        "employersQuestions"
      ],
      "summary": "Update a employers_Questions",
      "operationId": "updateemployers_Questions",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "_id",
        "type": "number",
        "description": "The id of the employers_Questions you want to update.",
        "required": true
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "in": "body",
        "name": "employers_Questions",
        "description": "The employers_Questions you want update with.",
        "required": false,
        "schema": {
          "$ref": "#/definitions/employers_questions"
        }
      }
      ],
      "responses": {
        "200": {
          "description": "The employers_Questions has been successfully updated.",
          "schema": {
            "$ref": "#/definitions/employers_questions"
          }
        }
      }
    },
    "delete": {
      "tags": [
        "employersQuestions"
      ],
      "summary": "Delete a employers_Questions",
      "operationId": "removeemployers_Questions",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "_id",
        "type": "string",
        "description": "The id of the employers_Questions you want to update.",
        "required": true
      },
      {
        "in": "header",
        "name": "x-access-token",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "204": {
          "description": "The employers_Questions has been deleted.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        },
        "404": {
          "description": "Records not found to delete.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/resume/permissions": {
    "get": {
      "tags": [
        "resumePermissions"
      ],
      "summary": "about resumePermissions",
      "operationId": "getResumePermissions",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "x-access-token",
        "in": "header",
        "description": "x-access-token",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "name": "start",
        "in": "query",
        "description": "how many data to view",
        "required": false,
        "type": "string",
        "format": "string"
      },
      {
        "name": "limit",
        "in": "query",
        "description": "how many data to view",
        "required": false,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all lookup resumePermissions.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "400": {
          "description": "UnexpectedClientErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "404": {
          "description": "Records not found.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    },
    "post": {
      "tags": [
        "resumePermissions"
      ],
      "summary": "about resumePermissions",
      "operationId": "postResumePermissions",
      "produces": [
        "application/json"
      ],
      "consumes": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "body",
        "name": "resumePermissions",
        "description": "The resumePermissions you want to create.",
        "required": true,
        "schema": {
          "$ref": "#/definitions/resumePermissions"
        }
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "201": {
          "description": "New resumePermissions is created.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "401": {
          "description": "Authentication Is Failed..",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "403": {
          "description": "No token provided.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/resume/permissions/{resumeId}/getPermissions": {
    "get": {
      "tags": [
        "resumePermissions"
      ],
      "summary": "about resumePermissions",
      "operationId": "getByIdResumePermissions",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "x-access-token",
        "in": "header",
        "description": "x-access-token",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "name": "resumeId",
        "in": "path",
        "description": "get resume permission by id",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all lookup resumePermissions.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "400": {
          "description": "UnexpectedClientErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "404": {
          "description": "Records not found.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/resume/permissions/{id_or_email}": {
    "put": {
      "tags": [
        "resumePermissions"
      ],
      "summary": "update resumePermissions by id",
      "operationId": "updateResumePermissions",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "x-access-token",
        "in": "header",
        "description": "x-access-token",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "name": id_or_email,
        "in": "path",
        "type": integer,
        "description": "Please use id to update data",
        "required": true
      },
      {
        "in": "body",
        "name": "resumePermissions",
        "description": "The resumePermissions you want to create.",
        "required": true,
        "schema": {
          "$ref": "#/definitions/resumePermissions"
        }
      }
      ],
      "responses": {
        "201": {
          "description": "New resumePermissions is created.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "401": {
          "description": "Authentication Is Failed..",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "403": {
          "description": "No token provided.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    },
    "delete": {
      "tags": [
        "resumePermissions"
      ],
      "summary": "delete resumePermissions by id",
      "operationId": "deleteResumePermissions",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "x-access-token",
        "in": "header",
        "description": "x-access-token",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "name": id_or_email,
        "in": "path",
        "type": integer,
        "description": "Please use id to delete data",
        "required": true
      }
      ],
      "responses": {
        "201": {
          "description": "New whiteboardQuestions is created.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "401": {
          "description": "Authentication Is Failed..",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "403": {
          "description": "No token provided.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    },
    "get": {
      "tags": [
        "resumePermissions"
      ],
      "summary": "get resume permission by email",
      "operationId": "getByEmailResumePermissions",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "x-access-token",
        "in": "header",
        "description": "x-access-token",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "name": "id_or_email",
        "in": "path",
        "description": "Please use email to get data",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all lookup resumePermissions.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "400": {
          "description": "UnexpectedClientErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "404": {
          "description": "Records not found.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/resume/permissions/email/permissions": {
    "get": {
      "tags": [
        "resumePermissions"
      ],
      "summary": "about resumePermissions",
      "operationId": "getResumePermissionsEmail",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "x-access-token",
        "in": "header",
        "description": "x-access-token",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all lookup resumePermissions.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "400": {
          "description": "UnexpectedClientErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "404": {
          "description": "Records not found.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/resumes": {
    "get": {
      "tags": [
        "Resumes"
      ],
      "summary": "List all Resumes",
      "operationId": "getResumes",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "name": "limit",
        "in": "query",
        "description": "how many Records to view",
        "type": "string",
        "format": "string",
        "required": true
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all Resumes.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/resumes"
            }
          }
        },
        "204": {
          "description": "Records not found.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "400": {
          "description": "UnexpectedClientErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    },
    "post": {
      "tags": [
        "Resumes"
      ],
      "summary": "Create a new Resumes",
      "operationId": "createResumes",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "body",
        "name": "resumes",
        "description": "The Resumes you want to create.",
        "required": true,
        "schema": {
          "$ref": "#/definitions/resumes"
        }
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "201": {
          "description": "New Resumes is created.",
          "schema": {
            "$ref": "#/definitions/resumes"
          }
        },
        "401": {
          "description": "Authentication Is Failed..",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "403": {
          "description": "No token provided.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/resumes/{id}": {
    "get": {
      "tags": [
        "Resumes"
      ],
      "summary": "common a specific Resumes",
      "operationId": "getByIdResumes",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "in": "path",
        "name": "id",
        "type": "string",
        "description": "The id of the Resumes you want to common.",
        "required": true
      }
      ],
      "responses": {
        "200": {
          "description": "The Resumes has been successfully get.",
          "schema": {
            "$ref": "#/definitions/resumes"
          }
        },
        "404": {
          "description": "Records not found to delete.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/common_Terms"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/common_Terms"
            }
          }
        }
      }
    },
    "put": {
      "tags": [
        "Resumes"
      ],
      "summary": "Update a Resumes",
      "operationId": "updateResumes",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "id",
        "type": "string",
        "description": "The id of the Resumes you want to update.",
        "required": true
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "in": "body",
        "name": "body",
        "description": "The Resumes you want update with.",
        "required": false,
        "schema": {
          "$ref": "#/definitions/resumes"
        }
      }
      ],
      "responses": {
        "200": {
          "description": "The Resumes has been successfully updated.",
          "schema": {
            "$ref": "#/definitions/resumes"
          }
        },
        "400": {
          "description": "Records not found to delete.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/common_Terms"
            }
          }
        },
        "404": {
          "description": "Records not found to delete.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/common_Terms"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/common_Terms"
            }
          }
        }
      }
    },
    "delete": {
      "tags": [
        "Resumes"
      ],
      "summary": "Delete a Resumes",
      "operationId": "removeResumes",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "id",
        "type": "string",
        "description": "The id of the Resumes you want to update.",
        "required": true
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "204": {
          "description": "The Resumes has been deleted.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        },
        "404": {
          "description": "Records not found to delete.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/common_Terms"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/common_Terms"
            }
          }
        }
      }
    }
  },
  "/resumes/{id}/stats": {
    "get": {
      "tags": [
        "Resumes"
      ],
      "summary": "List all Resumes",
      "operationId": "getResumesStats",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "in": "path",
        "name": "id",
        "type": "string",
        "description": "The id of the Resumes you want to common.",
        "required": true
      }
      ],
      "responses": {
        "200": {
          "description": "The Resumes has been successfully get.",
          "schema": {
            "type": "object",
            "properties": {
              "message": {
                "type": "string",
                "description": "this is resume stats..."
              }
            }
          }
        },
        "204": {
          "description": "Records not found.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "400": {
          "description": "UnexpectedClientErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }},
  "/resumes/{id}/short_uid": {
    "get": {
      "tags": [
        "Resumes"
      ],
      "summary": "List all Resumes",
      "operationId": "getResumesShortUid",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "in": "path",
        "name": "id",
        "type": "string",
        "description": "The id of the Resumes you want to common.",
        "required": true
      }
      ],
      "responses": {
        "200": {
          "description": "The Resumes has been successfully get.",
          "schema": {
            "type": "object",
            "properties": {
              "message": {
                "type": "string",
                "description": "this is resume short uid send..."
              }
            }
          }
        },
        "204": {
          "description": "Records not found.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "400": {
          "description": "UnexpectedClientErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }},
  "/resumes/search": {
    "post": {
      "tags": [
        "Resumes"
      ],
      "summary": "Create a new Resumes",
      "operationId": "searchResumes",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "body",
        "name": "resumes",
        "description": "The Resumes you want to create.",
        "required": true,
        "schema": {
          "$ref": "#/definitions/resumes"
        }
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "201": {
          "description": "New Resumes is created.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/resumes"
            }
          }
        },
        "401": {
          "description": "Authentication Is Failed..",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "403": {
          "description": "No token provided.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/resumes/{id}/feedback": {
    "post": {
      "tags": [
        "Resumes"
      ],
      "summary": "Create a new Resumes",
      "operationId": "getByIdFeedback",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "body",
        "name": "resumes",
        "description": "The Resumes you want to create.",
        "required": true,
        "schema": {
          "$ref": "#/definitions/resumes"
        }
      },
      {
        "in": "path",
        "name": "id",
        "type": "string",
        "description": "The id of the Resumes you want to common.",
        "required": true
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "201": {
          "description": "New Resumes is created.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/employer_interviews"
            }
          }
        },
        "401": {
          "description": "Authentication Is Failed..",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "403": {
          "description": "No token provided.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/cache/load": {
    "get": {
      "tags": [
        "cacheLoad"
      ],
      "summary": "about cacheLoad",
      "operationId": "getCacheLoad",
      "produces": [
        "application/json"
      ],
      "responses": {
        "200": {
          "description": "An array with all cacheLoad.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "400": {
          "description": "UnexpectedClientErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "404": {
          "description": "Records not found.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    },
    "post": {
      "tags": [
        "cacheLoad"
      ],
      "summary": "Create a new cacheLoad",
      "operationId": "postCacheLoad",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "x-access-token",
        "in": "header",
        "description": "x-access-token",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "in": "body",
        "name": "resumeRequests",
        "description": "The cacheLoad you want to create.",
        "required": true,
        "schema": {
          "$ref": "#/definitions/cacheLoad"
        }
      }
      ],
      "responses": {
        "201": {
          "description": "New cacheLoad is created.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "401": {
          "description": "Authentication Is Failed..",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "403": {
          "description": "No token provided.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/cache/load/{id}": {
    "get": {
      "tags": [
        "cacheLoad"
      ],
      "summary": "about cacheLoad",
      "operationId": "getByIdCacheLoad",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": id,
        "in": "path",
        "type": "string",
        "description": "get data based on id",
        "required": true
      }
      ],
      "responses": {
        "200": {
          "description": "An object with given id.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "400": {
          "description": "UnexpectedClientErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "404": {
          "description": "Records not found.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    },
    "put": {
      "tags": [
        "cacheLoad"
      ],
      "summary": "Create a new cacheLoad",
      "operationId": "updateByCacheLoad",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "x-access-token",
        "in": "header",
        "description": "x-access-token",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "name": id,
        "in": "path",
        "type": "string",
        "description": "get data based on id",
        "required": true
      },
      {
        "in": "body",
        "name": "resumeRequests",
        "description": "The resumeRequests you want to update.",
        "required": true,
        "schema": {
          "$ref": "#/definitions/cacheLoad"
        }
      }
      ],
      "responses": {
        "201": {
          "description": "New resumeRequests is created.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "401": {
          "description": "Authentication Is Failed..",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "403": {
          "description": "No token provided.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    },
    "delete": {
      "tags": [
        "cacheLoad"
      ],
      "summary": "about cacheLoad",
      "operationId": "deleteByCacheLoad",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "x-access-token",
        "in": "header",
        "description": "x-access-token",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "name": id,
        "in": "path",
        "type": "string",
        "description": "delete data based on id",
        "required": true
      }
      ],
      "responses": {
        "200": {
          "description": "An object with given id.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "400": {
          "description": "UnexpectedClientErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "404": {
          "description": "Records not found.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/resume/requests": {
    "get": {
      "tags": [
        "resumeRequests"
      ],
      "summary": "about resumeRequests",
      "operationId": "getAllResumeRequests",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "x-access-token",
        "in": "header",
        "description": "x-access-token",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "name": "start",
        "in": "query",
        "description": "start",
        "required": false,
        "type": "integer",
        "format": "string"
      },
      {
        "name": "limit",
        "in": "query",
        "description": "limit",
        "required": false,
        "type": "integer",
        "format": "string"
      },
      {
        "name": "sort",
        "in": "query",
        "type": "string",
        "enum": [
          "lastmoddatetime",
          "name"
        ],
        "description": "sort by different fields.",
        "required": true
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all resumeRequests.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "400": {
          "description": "UnexpectedClientErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "404": {
          "description": "Records not found.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    },
    "post": {
      "tags": [
        "resumeRequests"
      ],
      "summary": "Create a new resumeRequests",
      "operationId": "postResumeRequest",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "x-access-token",
        "in": "header",
        "description": "x-access-token",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "in": "body",
        "name": "resumeRequests",
        "description": "The resumeRequests you want to create.",
        "required": true,
        "schema": {
          "$ref": "#/definitions/resumeRequests"
        }
      }
      ],
      "responses": {
        "201": {
          "description": "New resumeRequests is created.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "401": {
          "description": "Authentication Is Failed..",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "403": {
          "description": "No token provided.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/resume/requests/{resumeId}": {
    "get": {
      "tags": [
        "resumeRequests"
      ],
      "summary": "about resumeRequests",
      "operationId": "getByIdResumeRequest",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "x-access-token",
        "in": "header",
        "description": "x-access-token",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "name": resumeId,
        "in": "path",
        "type": "string",
        "description": "get data based on id",
        "required": true
      }
      ],
      "responses": {
        "200": {
          "description": "An object with given id.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "400": {
          "description": "UnexpectedClientErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "404": {
          "description": "Records not found.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    },
    "put": {
      "tags": [
        "resumeRequests"
      ],
      "summary": "Create a new resumeRequests",
      "operationId": "updateByIdResumeRequest",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "x-access-token",
        "in": "header",
        "description": "x-access-token",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "name": resumeId,
        "in": "path",
        "type": "string",
        "description": "get data based on id",
        "required": true
      },
      {
        "in": "body",
        "name": "resumeRequests",
        "description": "The resumeRequests you want to update.",
        "required": true,
        "schema": {
          "$ref": "#/definitions/resumeRequests"
        }
      }
      ],
      "responses": {
        "201": {
          "description": "New resumeRequests is created.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "401": {
          "description": "Authentication Is Failed..",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "403": {
          "description": "No token provided.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    },
    "delete": {
      "tags": [
        "resumeRequests"
      ],
      "summary": "about resumeRequests",
      "operationId": "deleteByIdResumeRequest",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "x-access-token",
        "in": "header",
        "description": "x-access-token",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "name": resumeId,
        "in": "path",
        "type": "string",
        "description": "delete data based on id",
        "required": true
      }
      ],
      "responses": {
        "200": {
          "description": "An object with given id.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "400": {
          "description": "UnexpectedClientErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "404": {
          "description": "Records not found.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/jobs": {
    "get": {
      "tags": [
        "Jobs"
      ],
      "summary": "List all Jobs",
      "operationId": "getJobs",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "name": "limit",
        "in": "query",
        "description": "how many Records to view",
        "type": "string",
        "format": "string",
        "required": true
      },
      {
        "name": "location",
        "in": "header",
        "description": "location header",
        "required": false,
        "type": "string",
        "format": "string"
      },
      {
        "name": "distance",
        "in": "query",
        "description": "distance filter",
        "type": "string",
        "format": "string",
        "required": false
      },
      {
        "name": "uid",
        "in": "query",
        "description": "uid filter",
        "type": "string",
        "format": "string",
        "required": false
      },
      {
        "name": "country",
        "in": "query",
        "description": "country filter",
        "type": "string",
        "format": "string",
        "required": false
      },
      {
        "name": "state",
        "in": "query",
        "description": "state filter",
        "type": "string",
        "format": "string",
        "required": false
      },
      {
        "name": "region",
        "in": "query",
        "description": "region filter",
        "type": "string",
        "format": "string",
        "required": false
      },
      {
        "name": "city",
        "in": "query",
        "description": "city filter",
        "type": "string",
        "format": "string",
        "required": false
      },
      {
        "name": "postalCode",
        "in": "query",
        "description": "postalCode filter",
        "type": "string",
        "format": "string",
        "required": false
      },
      {
        "name": "organization",
        "in": "query",
        "description": "organization filter",
        "type": "string",
        "format": "string",
        "required": false
      },
      {
        "name": "url",
        "in": "query",
        "description": "url filter",
        "type": "string",
        "format": "string",
        "required": false
      },
      {
        "name": "baseSalary",
        "in": "query",
        "description": "baseSalary filter",
        "type": "string",
        "format": "string",
        "required": false
      },
      {
        "name": "email",
        "in": "query",
        "description": "email filter",
        "type": "string",
        "format": "string",
        "required": false
      },
      {
        "name": "skills",
        "in": "query",
        "description": "skills filter",
        "type": "string",
        "format": "string",
        "required": false
      },
      {
        "name": "category",
        "in": "query",
        "description": "category filter",
        "type": "string",
        "format": "string",
        "required": false
      },
      {
        "name": "industry",
        "in": "query",
        "description": "industry filter",
        "type": "string",
        "format": "string",
        "required": false
      },
      {
        "name": "education",
        "in": "query",
        "description": "education filter",
        "type": "string",
        "format": "string",
        "required": false
      },
      {
        "name": "experience",
        "in": "query",
        "description": "experience filter",
        "type": "string",
        "format": "string",
        "required": false
      },
      {
        "name": "source",
        "in": "query",
        "description": "source filter",
        "type": "string",
        "format": "string",
        "required": false
      },
      {
        "name": "employmentType",
        "in": "query",
        "description": "employmentType filter",
        "type": "string",
        "format": "string",
        "required": false
      },
      {
        "name": "positionStatus",
        "in": "query",
        "description": "positionStatus filter",
        "type": "string",
        "format": "string",
        "required": false
      },
      {
        "name": "workAuthorizations",
        "in": "query",
        "description": "workAuthorizations filter",
        "type": "string",
        "format": "string",
        "required": false
      },
      {
        "name": "timeDate",
        "in": "query",
        "description": "timeDate filter",
        "type": "string",
        "format": "string",
        "required": false
      },
      {
        "name": "timeUnit",
        "in": "query",
        "description": "timeUnit filter",
        "type": "string",
        "format": "string",
        "required": false
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all Jobs.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/jobs"
            }
          }
        },
        "204": {
          "description": "Records not found.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "400": {
          "description": "UnexpectedClientErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    },
    "post": {
      "tags": [
        "Jobs"
      ],
      "summary": "Create a new Jobs",
      "operationId": "createJobs",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "in": "body",
        "name": "jobs",
        "description": "The Jobs you want to create.",
        "required": true,
        "schema": {
          "$ref": "#/definitions/jobs"
        }
      }
      ],
      "responses": {
        "201": {
          "description": "New Jobs is created.",
          "schema": {
            "$ref": "#/definitions/jobs"
          }
        },
        "401": {
          "description": "Authentication Is Failed..",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "403": {
          "description": "No token provided.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/jobs/{id}": {
    "get": {
      "tags": [
        "Jobs"
      ],
      "summary": "common a specific Jobs",
      "operationId": "getByIdJobs",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "in": "path",
        "name": "id",
        "type": "string",
        "description": "The id of the Jobs you want to common.",
        "required": true
      }
      ],
      "responses": {
        "200": {
          "description": "The Jobs has been successfully get.",
          "schema": {
            "$ref": "#/definitions/jobs"
          }
        },
        "404": {
          "description": "Records not found to delete.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/common_Terms"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/common_Terms"
            }
          }
        }
      }
    },
    "put": {
      "tags": [
        "Jobs"
      ],
      "summary": "Update a Jobs",
      "operationId": "updateJobs",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "id",
        "type": "string",
        "description": "The id of the Jobs you want to update.",
        "required": true
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "in": "body",
        "name": "body",
        "description": "The Jobs you want update with.",
        "required": false,
        "schema": {
          "$ref": "#/definitions/jobs"
        }
      }
      ],
      "responses": {
        "200": {
          "description": "The Jobs has been successfully updated.",
          "schema": {
            "$ref": "#/definitions/jobs"
          }
        },
        "400": {
          "description": "Records not found to delete.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/common_Terms"
            }
          }
        },
        "404": {
          "description": "Records not found to delete.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/common_Terms"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/common_Terms"
            }
          }
        }
      }
    },
    "delete": {
      "tags": [
        "Jobs"
      ],
      "summary": "Delete a Jobs",
      "operationId": "removeJobs",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "id",
        "type": "string",
        "description": "The id of the Jobs you want to update.",
        "required": true
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "204": {
          "description": "The Jobs has been deleted.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        },
        "404": {
          "description": "Records not found to delete.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/common_Terms"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/common_Terms"
            }
          }
        }
      }
    }
  },
  "/skills":{
    "get": {
      "tags": [
        "skills"
      ],
      "summary": "List all skills",
      "operationId": "get skills",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "limit",
        "in": "query",
        "description": "how many Records to view",
        "type": "string",
        "format": "string",
        "required": true
      },
      {
        "name": "skill",
        "in": "query",
        "description": "filter by skill",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      {
        "name": "category",
        "in": "query",
        "description": "filter by category",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      },{
        "name": "q",
        "in": "query",
        "description": "filter by skill,category,alias",
        "required": false,
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      {
        "name": "sort",
        "in": "query",
        "description": "sort by skill,category,hint",
        "required": false,
        "type": "string",
        "enum": [
          "skill",
          "category",
          "hint"
        ]
      }

      ],
      "responses": {
        "200": {
          "description": "An array with all skills.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/skills"
            }
          }
        },
        "204": {
          "description": "Records not found.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "400": {
          "description": "UnexpectedClientErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    },
    "post": {
      "tags": [
        "skills"
      ],
      "summary": "Create a new skill",
      "operationId": "createskill",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "body",
        "name": "skills",
        "description": "The skills you want to create.",
        "required": true,
        "schema": {
          "$ref": "#/definitions/skills"
        }
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "201": {
          "description": "New skill is created.",
          "schema": {
            "$ref": "#/definitions/skills"
          }
        },
        "401": {
          "description": "Authentication Is Failed..",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "403": {
          "description": "No token provided.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/skills/{_id}":{
    "get": {
      "tags": [
        "skills"
      ],
      "summary": "get data by skill_id",
      "operationId": "get by skills _id",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "_id",
        "type": "string",
        "description": "The id of the questions you want to skills.",
        "required": true
      },
      {
        "in": "header",
        "name": "x-access-token",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all skills.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/skills"
            }
          }
        },
        "400": {
          "description": "UnexpectedClientErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "404": {
          "description": "Records not found.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    },
    "put": {
      "tags": [
        "skills"
      ],
      "summary": "Update a skills",
      "operationId": "updateskills",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "_id",
        "type": "number",
        "description": "The id of the skills you want to update.",
        "required": true
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "in": "body",
        "name": "skills",
        "description": "The skills you want update with.",
        "required": false,
        "schema": {
          "$ref": "#/definitions/skills"
        }
      }
      ],
      "responses": {
        "200": {
          "description": "The skills has been successfully updated.",
          "schema": {
            "$ref": "#/definitions/skills"
          }
        }
      }
    },
    "delete": {
      "tags": [
        "skills"
      ],
      "summary": "Delete a skill",
      "operationId": "removeskill",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "_id",
        "type": "string",
        "description": "The id of the skill you want to update.",
        "required": true
      },
      {
        "in": "header",
        "name": "x-access-token",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "204": {
          "description": "The skills has been deleted.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        },
        "404": {
          "description": "Records not found to delete.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/common/entities": {
    "get": {
      "tags": [
        "commonEntities"
      ],
      "summary": "List all common_Entities",
      "operationId": "getcommonEntities",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "limit",
        "in": "query",
        "description": "how many data to view",
        "type": "string",
        "format": "string",
        "required": false
      },
      {
        "name": "name",
        "in": "query",
        "description": "filter by name",
        "required": false,
        "type": "string",
        "format": "string"
      },
      {
        "name": "sort",
        "in": "query",
        "description": "sort by different fields.",
        "type": "string",
        "required": false,
        "enum": [
          "name",
          "id",
          "display_name",
          "lastmoddatetime"
        ]
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all common_Entities.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "204": {
          "description": "Records not found.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "400": {
          "description": "UnexpectedClientErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
    ,
    "post": {
      "tags": [
        "commonEntities"
      ],
      "summary": "Create a new commonEntities",
      "operationId": "createcommonEntities",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "body",
        "name": "body",
        "description": "The commonEntities you want to create.",
        "required": true,
        "schema": {
          "$ref": "#/definitions/common_Entities"
        }
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "201": {
          "description": "New commonEntities is created.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "401": {
          "description": "Authentication Is Failed..",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "403": {
          "description": "No token provided.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }


  },
  "/common/entities/{id}": {
    "get": {
      "tags": [
        "commonEntities"
      ],
      "summary": "common a specific commonentities",
      "operationId": "getByIdcommonentities",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "id",
        "type": "number",
        "description": "The id of the commonentities you want to common.",
        "required": true
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all commonentities.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        }
      }
    },
    "put": {
      "tags": [
        "commonEntities"
      ],
      "summary": "Update a commonentities",
      "operationId": "updatecommonentities",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "id",
        "type": "number",
        "description": "The id of the commonentities you want to update.",
        "required": true
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "in": "body",
        "name": "body",
        "description": "The commonentities you want update with.",
        "required": false,
        "schema": {
          "$ref": "#/definitions/common_Entities"
        }
      }
      ],
      "responses": {
        "200": {
          "description": "The commonentities has been successfully updated.",
          "schema": {
            "$ref": "#/definitions/common_Entities"
          }
        }
      }
    },
    "delete": {
      "tags": [
        "commonEntities"
      ],
      "summary": "Delete a commonentities",
      "operationId": "removecommonentities",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "id",
        "type": "number",
        "description": "The id of the commonentities you want to update.",
        "required": true
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "204": {
          "description": "The commonentities has been deleted.",
          "schema": {
            "$ref": "#/definitions/common_Entities"
          }
        },
        "404": {
          "description": "Records not found to delete.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/common_Entities"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/common_Entities"
            }
          }
        }
      }
    }
  },
  "/common/values": {
    "get": {
      "tags": [
        "commonValues"
      ],
      "summary": "List all common_Values",
      "operationId": "getcommonValues",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "limit",
        "in": "query",
        "description": "how many data to view",
        "type": "string",
        "format": "string",
        "required": false
      },
      {
        "name": "entityid",
        "in": "query",
        "description": "filter by entityid",
        "required": false,
        "type": "string",
        "format": "string"
      },
      {
        "name": "sort",
        "in": "query",
        "description": "sort by different fields.",
        "type": "string",
        "required": false,
        "enum": [
          "audio",
          "id",
          "vedio",
          "periodlevel",
          "entityid",
          "lastmoddatetime"
        ]
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all common_Values.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "204": {
          "description": "Records not found.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "400": {
          "description": "UnexpectedClientErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
    ,
    "post": {
      "tags": [
        "commonValues"
      ],
      "summary": "Create a new commonValues",
      "operationId": "createcommonValues",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "body",
        "name": "body",
        "description": "The commonValues you want to create.",
        "required": true,
        "schema": {
          "$ref": "#/definitions/common_Values"
        }
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "201": {
          "description": "New commonValues is created.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "401": {
          "description": "Authentication Is Failed..",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "403": {
          "description": "No token provided.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }


  },
  "/common/values/{id}": {
    "get": {
      "tags": [
        "commonValues"
      ],
      "summary": "common a specific commonvalues",
      "operationId": "getByIdcommonvalues",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "id",
        "type": "number",
        "description": "The id of the commonvalues you want to common.",
        "required": true
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all commonvalues.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        }
      }
    },
    "put": {
      "tags": [
        "commonValues"
      ],
      "summary": "Update a commonvalues",
      "operationId": "updatecommonvalues",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "id",
        "type": "number",
        "description": "The id of the commonvalues you want to update.",
        "required": true
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "in": "body",
        "name": "body",
        "description": "The commonentities you want update with.",
        "required": false,
        "schema": {
          "$ref": "#/definitions/common_Entities"
        }
      }
      ],
      "responses": {
        "200": {
          "description": "The commonentities has been successfully updated.",
          "schema": {
            "$ref": "#/definitions/common_Entities"
          }
        }
      }
    },
    "delete": {
      "tags": [
        "commonValues"
      ],
      "summary": "Delete a commonvalues",
      "operationId": "removecommonvalues",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "id",
        "type": "number",
        "description": "The id of the commonvalues you want to update.",
        "required": true
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "204": {
          "description": "The commonvalues has been deleted.",
          "schema": {
            "$ref": "#/definitions/common_Values"
          }
        },
        "404": {
          "description": "Records not found to delete.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/common_Values"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/common_Values"
            }
          }
        }
      }
    }
  },
  "/cache/deletion": {
    "post": {
      "tags": [
        "cacheDeletion"
      ],
      "summary": "Create a new cacheDeletion",
      "operationId": "cacheDeletion",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "x-access-token",
        "in": "header",
        "description": "x-access-token",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "in": "body",
        "name": "cacheDeletion",
        "description": "The cacheDeletion you want to remove cache.",
        "required": true,
        "schema": {
          "$ref": "#/definitions/cacheDeletion"
        }
      }
      ],
      "responses": {
        "201": {
          "description": "New cacheDeletion is created.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "401": {
          "description": "Authentication Is Failed..",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "403": {
          "description": "No token provided.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/compiler": {
    "get": {
      "tags": [
        "compiler"
      ],
      "summary": "about compiler",
      "operationId": "getAll",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "start",
        "in": "query",
        "description": "how many data to view",
        "required": false,
        "type": "string",
        "format": "string"
      },
      {
        "name": "limit",
        "in": "query",
        "description": "how many data to view",
        "required": false,
        "type": "string",
        "format": "string"
      },
      {
        "name": "sort",
        "in": "query",
        "type": "string",
        "enum": [
          "id",
          "compilerid",
          "subjectid",
          "compiler_required",
          "lastmoddatetime"
        ],
        "description": "sort by different fields.",
        "required": true
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all compiler.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "400": {
          "description": "UnexpectedClientErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "404": {
          "description": "Records not found.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    },
    "post": {
      "tags": [
        "compiler"
      ],
      "summary": "about compiler",
      "operationId": "postData",
      "produces": [
        "application/json"
      ],
      "consumes": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "body",
        "name": "compiler",
        "description": "The compiler you want to create.",
        "required": true,
        "schema": {
          "$ref": "#/definitions/compiler"
        }
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "201": {
          "description": "New compiler is created.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "401": {
          "description": "Authentication Is Failed..",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "403": {
          "description": "No token provided.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/compiler/{compilerId}": {
    "get": {
      "tags": [
        "compiler"
      ],
      "summary": "about compiler",
      "operationId": "getByIdcompiler",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": compilerId,
        "in": "path",
        "type": "string",
        "description": "get data based on id",
        "required": true
      }
      ],
      "responses": {
        "200": {
          "description": "An object with given id.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "400": {
          "description": "UnexpectedClientErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "404": {
          "description": "Records not found.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    },
    "put": {
      "tags": [
        "compiler"
      ],
      "summary": "Create a new compiler",
      "operationId": "updateByIdCompiler",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "x-access-token",
        "in": "header",
        "description": "x-access-token",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "name": compilerId,
        "in": "path",
        "type": "string",
        "description": "get data based on id",
        "required": true
      },
      {
        "in": "body",
        "name": "compiler",
        "description": "The compiler you want to update.",
        "required": true,
        "schema": {
          "$ref": "#/definitions/compiler"
        }
      }
      ],
      "responses": {
        "201": {
          "description": "New compiler is created.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "401": {
          "description": "Authentication Is Failed..",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "403": {
          "description": "No token provided.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    },
    "delete": {
      "tags": [
        "compiler"
      ],
      "summary": "about compiler",
      "operationId": "deleteByIdCompiler",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "x-access-token",
        "in": "header",
        "description": "x-access-token",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "name": compilerId,
        "in": "path",
        "type": "string",
        "description": "delete data based on id",
        "required": true
      }
      ],
      "responses": {
        "200": {
          "description": "An object with given id.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "400": {
          "description": "UnexpectedClientErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "404": {
          "description": "Records not found.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/compiler/processes": {
    "post": {
      "tags": [
        "compiler"
      ],
      "summary": "about compilerProcesses",
      "operationId": "compilerProcesses",
      "produces": [
        "application/json"
      ],
      "consumes": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "body",
        "name": "compiler",
        "description": "The compilerProcesses you want to create.",
        "required": true,
        "schema": {
          "$ref": "#/definitions/compiler"
        }
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "201": {
          "description": "New compiler is created.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "401": {
          "description": "Authentication Is Failed..",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "403": {
          "description": "No token provided.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/challenges": {
    "get": {
      "tags": [
        "Challenges"
      ],
      "summary": "List all challenges",
      "operationId": "getChallenges",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all challenges.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/challenges"
            }
          }
        },
        "400": {
          "description": "UnexpectedClientErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "404": {
          "description": "Records not found.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    },
    "post": {
      "tags": [
        "Challenges"
      ],
      "summary": "Create a new challenges",
      "operationId": "createChallenges",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "x-access-token",
        "in": "header",
        "description": "x-access-token",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "in": "body",
        "name": "challenges",
        "description": "The challenges you want to create.",
        "required": true,
        "schema": {
          "$ref": "#/definitions/challenges"
        }
      }
      ],
      "responses": {
        "201": {
          "description": "New challenges is created.",
          "schema": {
            "$ref": "#/definitions/challenges"
          }
        },
        "401": {
          "description": "Authentication Is Failed..",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "403": {
          "description": "No token provided.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/challenges/{id}": {
    "get": {
      "tags": [
        "Challenges"
      ],
      "summary": "common a specific Challenges",
      "operationId": "getChallengesById",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "in": "path",
        "name": "id",
        "type": "string",
        "description": "The id of the challenges you want to common.",
        "required": true
      }
      ],
      "responses": {
        "200": {
          "description": "The challenges has been successfully get.",
          "schema": {
            "$ref": "#/definitions/jobs"
          }
        },
        "404": {
          "description": "Records not found to delete.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/common_Terms"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/common_Terms"
            }
          }
        }
      }
    },
    "put": {
      "tags": [
        "Challenges"
      ],
      "summary": "Update a Challenges",
      "operationId": "updateChallenges",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "id",
        "type": "string",
        "description": "The id of the challenges you want to update.",
        "required": true
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "in": "body",
        "name": "body",
        "description": "The challenges you want update with.",
        "required": false,
        "schema": {
          "$ref": "#/definitions/challenges"
        }
      }
      ],
      "responses": {
        "200": {
          "description": "The challenges has been successfully updated.",
          "schema": {
            "$ref": "#/definitions/challenges"
          }
        },
        "400": {
          "description": "Records not found to delete.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/common_Terms"
            }
          }
        },
        "404": {
          "description": "Records not found to delete.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/common_Terms"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/common_Terms"
            }
          }
        }
      }
    },
    "delete": {
      "tags": [
        "Challenges"
      ],
      "summary": "Delete a Challenges",
      "operationId": "removeChallenges",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "in": "path",
        "name": "id",
        "type": "string",
        "description": "The id of the challenges you want to update.",
        "required": true
      },
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "204": {
          "description": "The challenges has been deleted.",
          "schema": {
            "$ref": "#/definitions/Message"
          }
        },
        "404": {
          "description": "Records not found to delete.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/common_Terms"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/common_Terms"
            }
          }
        }
      }
    }
  },
  "/google_api": {
    "get": {
      "tags": [
        "Google_Api"
      ],
      "summary": "List all Google-API",
      "operationId": "getGoogleApi",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all Google-API.",
          "schema": {
            "$ref": "#/definitions/google_api"
          }
        },
        "400": {
          "description": "UnexpectedClientErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "404": {
          "description": "Records not found.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/lookup/industries": {
    "get": {
      "tags": [
        "lookupIndustries"
      ],
      "summary": "lookupIndustries",
      "operationId": "lookupIndustries",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "limit",
        "in": "query",
        "description": "how many data to view",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "name": "sort",
        "in": "query",
        "type": "string",
        "enum": [
          "id",
          "name",
          "flag",
          "lastmoduserid",
          "lastmoddatetime"
        ],
        "description": "sort by different fields.",
        "required": true
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all lookupIndustries.",
          "schema": {
            "type": "array",
            "items": {
            "$ref": "#/definitions/lookupIndustries"
            }
          }
        },
        "400": {
          "description": "UnexpectedClientErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "404": {
          "description": "Records not found.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    },
    "post": {
      "tags": [
        "lookupIndustries"
      ],
      "summary": "Create a new lookupIndustries",
      "operationId": "lookupIndustries",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "in": "body",
        "name": "lookupIndustries",
        "description": "The lookupIndustries you want to create.",
        "required": true,
        "schema": {
          "$ref": "#/definitions/lookupIndustries"
        }
      }
      ],
      "responses": {
        "201": {
          "description": "New lookupIndustries is created.",
          "schema": {
              "$ref": "#/definitions/lookupIndustries"
          }
        },
        "401": {
          "description": "Authentication Is Failed..",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "403": {
          "description": "No token provided.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  },
  "/lookup/industries/{id}": {
    "get": {
      "tags": [
        "lookupIndustries"
      ],
      "summary": " get by Industrieid",
      "operationId": " get byid lookupIndustries",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "id",
        "in": "path",
        "description": "get by id",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "200": {
          "description": "An array with all lookupIndustries.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/lookupIndustries"
            }
          }
        },
        "400": {
          "description": "UnexpectedClientErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "404": {
          "description": "Records not found.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    },
    "put": {
      "tags": [
        "lookupIndustries"
      ],
      "summary": "Update Industries",
      "operationId": "lookupIndustrie",
      "consumes": [
        "application/json"
      ],
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "name": "id",
        "in": "path",
        "description": "update by id",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "in": "body",
        "name": "lookupIndustries",
        "description": "The Industries you want to create.",
        "required": true,
        "schema": {
          "$ref": "#/definitions/lookupIndustries"
        }
      }
      ],
      "responses": {
        "200": {
          "description": "Industrie is updated.",
          "schema": {
              "$ref": "#/definitions/lookupIndustries"
          }
        },
        "401": {
          "description": "Authentication Is Failed..",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "403": {
          "description": "No token provided.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    },
    "delete": {
      "tags": [
        "lookupIndustries"
      ],
      "summary": " remove lookupIndustries",
      "operationId": " lookupIndustries",
      "produces": [
        "application/json"
      ],
      "parameters": [
      {
        "name": "x-access-token",
        "in": "header",
        "description": "token authentication...",
        "required": true,
        "type": "string",
        "format": "string"
      },
      {
        "name": "id",
        "in": "path",
        "description": "delete by id",
        "required": true,
        "type": "string",
        "format": "string"
      }
      ],
      "responses": {
        "204": {
          "description": "delete Industrie.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "400": {
          "description": "UnexpectedClientErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "404": {
          "description": "Records not found.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "500": {
          "description": "InternerServerErrorResponse.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    }
  }
}
################################################################################
#                                 Definitions                                  #
################################################################################
"definitions": {
  "Message": {
    "type": "object",
    "properties": {
      "message": {
        "type": "string",
        "description": "A response message from this is api."
      }
    }
  },
  "audio_questions": {
    "type": "object",
    "properties": {
      "id": {
        "type": "string",
        "description": "This is id user."
      },
      "subjectid": {
        "type": "string",
        "description": "This is ts_subjectid of user."
      },
      "levelid": {
        "type": "string",
        "description": "This is levelid ."
      },
      "question": {
        "type": "string",
        "description": "about question."
      },
      "preparetime": {
        "type": "string",
        "description": "about choice1."
      },
      "reviewDone": {
        "type": "string",
        "description": "about choice2."
      },
      "time": {
        "type": "string",
        "description": "about time."
      },
      "lastmoddatetime": {
        "type": "string",
        "description": "about lastmoddatetime."
      },
      "lastmoduserid": {
        "type": "string",
        "description": "about lastmoduserid."
      }
    }
  },
  "job_applications": {
    "type": "object",
    "properties": {
      "_id": {
        "type": "string",
        "description": "This is id jobapplications."
      },
      "candidate_id": {
        "type": "string",
        "description": "This is candidate_id of jobapplications."
      },
      "job_id": {
        "type": "string",
        "description": "This is job_id for  jobapplications."
      },
      "resume_id": {
        "type": "string",
        "description": "This is resume_id for  jobapplications."
      },
      "job_applied_date": {
        "type": "string",
        "description": "This is job_applied_date for  jobapplications."
      },
      "lastmoddatetime": {
        "type": "string",
        "description": "about lastmoddatetime."
      },
      "lastmoduserid": {
        "type": "string",
        "description": "about lastmoduserid."
      }
    }
  },
  "Video_Questions": {
    "type": "object",
    "properties": {
      "id": {
        "type": "number",
        "description": "A unique identifier of the video_Questions. Automatically assigned by the API when the video_Questions is created."
      },
      "ts_subjectid": {
        "type": "number",
        "description": "This ts_subjectid comming from  the subject api."
      },
      "levelid": {
        "type": "string",
        "description": "This is levelid of the common_level."
      },
      "answer": {
        "type": "string",
        "description": "This is answer of the video_questions."
      },
      "question": {
        "type": "string",
        "description": "This is question of the video_Questions."
      },
      "time": {
        "type": "number",
        "description": "the time which is taken by user."
      },
      "lastmoddatetime": {
        "type": "number",
        "description": "this field is used for marketing itself."
      },
      "lastmoduserid": {
        "type": "number",
        "description": "An internal version lastmoduserid. Not to be updated directly."
      }
    }
  },
  "candidates": {
    "type": "object",
    "properties": {
      "user_profile": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "picture_link": {
            "type": "string"
          },
          "picture_blob": {
            "type": "string"
          },
          "country_name": {
            "type": "string"
          }
        }
      },
      "source_details": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "source": {
            "type": "string"
          },
          "source_id": {
            "type": "string"
          }
        }
      },
      "demo_details": {
        "type": "object",
        "properties": {
          "video_demo": {
            "type": "string"
          },
          "coding_demo": {
            "type": "string"
          },
          "choice_demo": {
            "type": "string"
          }
        }
      },
      "auth_details": {
        "type": "object",
        "properties": {
          "is_user_verified": {
            "type": "string"
          },
          "first_login_completed": {
            "type": "string"
          },
          "last_verification_code": {
            "type": "string"
          },
          "registereddatetime": {
            "type": "string"
          }
        }
      },
      "lastmoddatetime": {
        "type": "string"
      },
      "resume_id": {
        "type": "string"
      }
    }
  },
  "common_types": {
    "type": "object",
    "properties": {
      "id": {
        "type": "number",
        "description": "A unique identifier of the common_types. Automatically assigned by the API when the common_types is created."
      },
      "entityid": {
        "type": "number",
        "description": "This id comming from  the common_entities."
      },
      "name": {
        "type": "string",
        "description": "The name of the Common_type."
      },
      "display_name": {
        "type": "string",
        "description": "The display_name of the Common_type."
      },
      "description": {
        "type": "string",
        "description": "The description of the Common_types."
      },
      "lastmoddatetime": {
        "type": "number",
        "description": "An internal version stamp. Not to be updated directly."
      },
      "lastmoduserid": {
        "type": "number",
        "description": "An internal version lastmoduserid. Not to be updated directly."
      }
    }
  },
  "common_categories": {
    "type": "object",
    "properties": {
      "id": {
        "type": "number",
        "description": "A unique identifier of the common_categories. Automatically assigned by the API when the common_types is created."
      },
      "entityid": {
        "type": "number",
        "description": "This id comming from  the common_entities."
      },
      "name": {
        "type": "string",
        "description": "The name of the Common_type."
      },
      "display_name": {
        "type": "string",
        "description": "The display_name of the common_categories."
      },
      "enabled": {
        "type": "number",
        "description": "The display_name of the common_categories."
      },
      "description": {
        "type": "string",
        "description": "The description of the common_categories."
      },
      "lastmoddatetime": {
        "type": "number",
        "description": "An internal version stamp. Not to be updated directly."
      },
      "lastmoduserid": {
        "type": "number",
        "description": "An internal version lastmoduserid. Not to be updated directly."
      }
    }
  },
  "common_levels": {
    "type": "object",
    "properties": {
      "id": {
        "type": "number",
        "description": "A unique identifier of the common_levels. Automatically assigned by the API when the common_levelsis created."
      },
      "entityid": {
        "type": "number",
        "description": "This id comming from  the common_entities."
      },
      "name": {
        "type": "string",
        "description": "The name of the Common_type."
      },
      "display_name": {
        "type": "string",
        "description": "The display_name of the common_levels."
      },
      "enabled": {
        "type": "number",
        "description": "The display_name of the common_levels."
      },
      "description": {
        "type": "string",
        "description": "The description of the common_levels."
      },
      "lastmoddatetime": {
        "type": "number",
        "description": "An internal version stamp. Not to be updated directly."
      },
      "lastmoduserid": {
        "type": "number",
        "description": "An internal version lastmoduserid. Not to be updated directly."
      }
    }
  },
  "common_roles": {
    "type": "object",
    "properties": {
      "id": {
        "type": "number",
        "description": "A unique identifier of the common_levels. Automatically assigned by the API when the common_levelsis created."
      },
      "entityid": {
        "type": "number",
        "description": "This id comming from  the common_entities."
      },
      "name": {
        "type": "string",
        "description": "The name of the Common_roles."
      },
      "display_name": {
        "type": "string",
        "description": "The display_name of the common_roles."
      },
      "description": {
        "type": "string",
        "description": "The description of the common_roles."
      },
      "lastmoddatetime": {
        "type": "number",
        "description": "An internal   version stamp. Not to be updated directly."
      },
      "lastmoduserid": {
        "type": "number",
        "description": "An internal version lastmoduserid. Not to be updated directly."
      }
    }
  },
  "common_status": {
    "type": "object",
    "properties": {
      "id": {
        "type": "number",
        "description": "A unique identifier of the common_status. Automatically assigned by the API when the common_status created."
      },
      "entityid": {
        "type": "number",
        "description": "This id comming from  the common_entities."
      },
      "name": {
        "type": "string",
        "description": "The name of the common_status."
      },
      "enabled": {
        "type": "string",
        "description": "The enabled of the common_status."
      },
      "display_name": {
        "type": "string",
        "description": "The display_name of the common_status."
      },
      "description": {
        "type": "string",
        "description": "The description of the common_status."
      },
      "lastmoddatetime": {
        "type": "number",
        "description": "An internal   version stamp. Not to be updated directly."
      },
      "lastmoduserid": {
        "type": "number",
        "description": "An internal version lastmoduserid. Not to be updated directly."
      }
    }
  },
  "email_engine": {
    "type": "object",
    "properties": {
      "to": {
        "type": "string",
        "description": "give emailid."
      },
      "message_type": {
        "type": "string",
        "description": "This about message_type."
      },
      "name": {
        "type": "string",
        "description": "The name of the person."
      },
      "from": {
        "type": "string",
        "description": "to give from address ."
      },
      "engine": {
        "type": "string",
        "description": "The engine field."
      },
      "test": {
        "type": "string",
        "description": "The test field."
      },
      "debug": {
        "type": "number",
        "description": "The debug field."
      }
    }
  },
  "employers": {
    "type": "object",
    "properties": {
      "user_profile": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "picture_link": {
            "type": "string"
          },
          "picture_blob": {
            "type": "string"
          }
        }
      },
      "source_details": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "source": {
            "type": "string"
          }
        }
      },
      "employer_details": {
        "type": "object",
        "properties": {
          "company_name": {
            "type": "string"
          },
          "company_size": {
            "type": "string"
          },
          "country_name": {
            "type": "string"
          },
          "job_title": {
            "type": "string"
          }
        }
      },
      "auth_details": {
        "type": "object",
        "properties": {
          "is_super": {
            "type": "string"
          },
          "is_user_verified": {
            "type": "string"
          },
          "first_login_completed": {
            "type": "string"
          },
          "last_verification_code": {
            "type": "string"
          },
          "registereddatetime": {
            "type": "string"
          }
        }
      },
      "lastmoddatetime": {
        "type": "string"
      }
    }
  },
  "lookup_Countries": {
    "type": "object",
    "properties": {
      "id": {
        "type": "number",
        "description": "A unique identifier of the common_levels. Automatically assigned by the API when the common_levelsis created."
      },
      "iso2": {
        "type": "string",
        "description": "This iso2  from  the lookup_Countries."
      },
      "short_name": {
        "type": "string",
        "description": "The short_name of the lookup_Countries."
      },
      "long_name": {
        "type": "string",
        "description": "The long_name of the lookup_Countries."
      },
      "iso3": {
        "type": "string",
        "description": "This iso3  from  the lookup_Countries."
      },
      "numcode": {
        "type": "number",
        "description": "This numcode  from  the lookup_Countries."
      },
      "un_member": {
        "type": "number",
        "description": "This un_member  from  the lookup_Countries."
      },
      "calling_code": {
        "type": "number",
        "description": "This calling_code  from  the lookup_Countries."
      },
      "cctld": {
        "type": "number",
        "description": "The description of the common_roles."
      },
      "lastmoddatetime": {
        "type": "number",
        "description": "An internal  lookup_Countries version stamp. Not to be updated directly."
      },
      "lastmoduserid": {
        "type": "number",
        "description": "An internal version lastmoduserid. Not to be updated directly."
      }
    }
  },
  "lookup_cities": {
    "type": "object",
    "properties": {
      "id": {
        "type": "number",
        "description": "A unique identifier of the common_levels. Automatically assigned by the API when the common_levelsis created."
      },
      "name": {
        "type": "string",
        "description": "This name  from  the lookup_cities."
      },
      "latitude": {
        "type": "string",
        "description": "The latitude of the lookup_cities."
      },
      "longitude": {
        "type": "string",
        "description": "The longitude of the lookup_cities."
      },
      "region": {
        "type": "string",
        "description": "This region  from  the lookup_cities."
      },
      "zipcode": {
        "type": "number",
        "description": "This zipcode  from  the lookup_cities."
      },
      "countryid": {
        "type": "number",
        "description": "This countryid  from  the lookup_countries."
      },
      "lastmoddatetime": {
        "type": "number",
        "description": "An internal  lookup_Countries version stamp. Not to be updated directly."
      },
      "lastmoduserid": {
        "type": "number",
        "description": "An internal version lastmoduserid. Not to be updated directly."
      }
    }
  },
  "lookup_currencies": {
    "type": "object",
    "properties": {
      "id": {
        "type": "string",
        "description": "This is id Currencies."
      },
      "country": {
        "type": "string",
        "description": "This is country of Currencies."
      },
      "symbol": {
        "type": "string",
        "description": "This is symbol ."
      },
      "name": {
        "type": "string",
        "description": "about name."
      },
      "code": {
        "type": "string",
        "description": "about code."
      },
      "lastmoddatetime": {
        "type": "string",
        "description": "about lastmoddatetime."
      },
      "lastmoduserid": {
        "type": "string",
        "description": "about lastmoduserid."
      }
    }
  },
  "Ts_login": {
    "type": "object",
    "properties": {
      "app_type": {
        "type": "string",
        "description": "This is app_type which going to login."
      },
      "email_address": {
        "type": "string",
        "description": "This is email_address address of the user."
      },
      "password": {
        "type": "string",
        "description": "This is password for login."
      },
      "type": {
        "type": "string",
        "description": "login."
      }
    }
  },
  "Ts_register": {
    "type": "object",
    "properties": {
      "app_type": {
        "type": "string",
        "description": "This is app_type which going to rigister."
      },
      "email_address": {
        "type": "string",
        "description": "This is email_address address of the user."
      },
      "password": {
        "type": "string",
        "description": "This is password for login."
      },
      "message_type": {
        "type": "string",
        "description": "rigister."
      },
      "type": {
        "type": "string",
        "description": "rigister."
      },
      "role": {
        "type": "string",
        "description": "login role."
      }
    }
  },
  "Ts_codeverification": {
    "type": "object",
    "properties": {
      "app_type": {
        "type": "string",
        "description": "This is app_type which going to rigister."
      },
      "token": {
        "type": "string",
        "description": "using token we are verifying the user"
      },
      "login_type": {
        "type": "string",
        "description": "This is login_type for Ts_codeverification."
      }
    }
  },
  "Ts_forgotpassword": {
    "type": "object",
    "properties": {
      "app_type": {
        "type": "string",
        "description": "This is app_type which going to login."
      },
      "email_address": {
        "type": "string",
        "description": "This is email_address address of the user."
      },
      "password": {
        "type": "string",
        "description": "This is password for login."
      },
      "type": {
        "type": "string",
        "description": "login."
      }
    }
  },
  "User_reviews": {
    "type": "object",
    "properties": {
      "_id": {
        "type": "string",
        "description": "This is id user."
      },
      "candidate_Id": {
        "type": "string",
        "description": "This is candidate_Id of user."
      },
      "source": {
        "type": "string",
        "description": "This is source ."
      },
      "message": {
        "type": "string",
        "description": "about message."
      },
      "profile_image": {
        "type": "string",
        "description": "about profile_image."
      },
      "improve_message": {
        "type": "string",
        "description": "about improve_message."
      },
      "rating": {
        "type": "string",
        "description": "about rating."
      },
      "is_used_for_marketing": {
        "type": "string",
        "description": "about is_used_for_marketing."
      },
      "lastmoddatetime": {
        "type": "string",
        "description": "about lastmoddatetime."
      },
      "is_public": {
        "type": "string",
        "description": "about is_public."
      }
    }
  },
  "Ts_emailactivation": {
    "type": "object",
    "properties": {
      "app_type": {
        "type": "string",
        "description": "This is app_type which going to Ts_emailactivation."
      },
      "email_address": {
        "type": "string",
        "description": "This is email_address address of the user."
      },
      "verification_code": {
        "type": "string",
        "description": "This is verification_code for Ts_emailactivation."
      },
      "type": {
        "type": "string",
        "description": "Ts_emailactivation."
      }
    }
  },
  "choiceQuestions": {
    "type": "object",
    "properties": {
      "_id": {
        "type": "string",
        "description": "This is id user."
      },
      "ts_subjectid": {
        "type": "string",
        "description": "This is ts_subjectid of user."
      },
      "levelid": {
        "type": "string",
        "description": "This is levelid ."
      },
      "question": {
        "type": "string",
        "description": "about question."
      },
      "choice1": {
        "type": "string",
        "description": "about choice1."
      },
      "choice2": {
        "type": "string",
        "description": "about choice2."
      },
      "choice3": {
        "type": "string",
        "description": "about choice3."
      },
      "choice4": {
        "type": "string",
        "description": "about choice4."
      },
      "choice5": {
        "type": "string",
        "description": "about choice5."
      },
      "choice6": {
        "type": "string",
        "description": "about choice6."
      },
      "answer": {
        "type": "string",
        "description": "about answer."
      },
      "explanation": {
        "type": "string",
        "description": "about explanation."
      },
      "user": {
        "type": "string",
        "description": "about user."
      },
      "reviewed": {
        "type": "string",
        "description": "about reviewed."
      },
      "approved": {
        "type": "string",
        "description": "about approved."
      },
      "tested": {
        "type": "string",
        "description": "about tested."
      },
      "weightage": {
        "type": "string",
        "description": "about weightage."
      },
      "time": {
        "type": "string",
        "description": "about time."
      },
      "lastmoddatetime": {
        "type": "string",
        "description": "about lastmoddatetime."
      },
      "lastmoduserid": {
        "type": "string",
        "description": "about lastmoduserid."
      }
    }
  },
  "codingQuestions": {
    "type": "object",
    "properties": {
      "id": {
        "type": "string",
        "description": "This is id user."
      },
      "ts_subjectid": {
        "type": "string",
        "description": "This is ts_subjectid of user."
      },
      "levelid": {
        "type": "string",
        "description": "This is levelid ."
      },
      "question": {
        "type": "string",
        "description": "about question."
      },
      "hint": {
        "type": "string",
        "description": "about hint."
      },
      "testcases": {
        "type": "string",
        "description": "about testcases."
      },
      "template": {
        "type": "string",
        "description": "about template."
      },
      "answer": {
        "type": "string",
        "description": "about answer."
      },
      "time": {
        "type": "string",
        "description": "about time."
      },
      "lastmoddatetime": {
        "type": "string",
        "description": "about lastmoddatetime."
      },
      "lastmoduserid": {
        "type": "string",
        "description": "about lastmoduserid."
      }
    }
  },
  "Ts_Subjects": {
    "type": "object",
    "properties": {
      "id": {
        "type": "string",
        "description": "This is id of Ts_Subjects."
      },
      "categoryid": {
        "type": "string",
        "description": "This is categoryid Ts_Subjects."
      },
      "name": {
        "type": "string",
        "description": "This is name for Ts_Subjects."
      },
      "icon_class": {
        "type": "string",
        "description": "icon_class for Ts_Subjects."
      },
      "description": {
        "type": "string",
        "description": "description for Ts_Subjects."
      },
      "lastmoddatetime": {
        "type": "string",
        "description": "lastmoddatetime for Ts_Subjects."
      },
      "lastmoduserid": {
        "type": "string",
        "description": "lastmoduserid for Ts_Subjects."
      }
    }
  },
  "Questions": {
    "type": "object",
    "properties": {
      "id": {
        "type": "number",
        "description": "A unique identifier of the video_Questions. Automatically assigned by the API when the video_Questions is created."
      },
      "ts_subjectid": {
        "type": "number",
        "description": "This ts_subjectid comming from  the subject api."
      },
      "levelid": {
        "type": "string",
        "description": "This is levelid of the common_level."
      },
      "answer": {
        "type": "string",
        "description": "This is answer of the video_questions."
      },
      "question": {
        "type": "string",
        "description": "This is question of the video_Questions."
      },
      "time": {
        "type": "number",
        "description": "the time which is taken by user."
      },
      "lastmoddatetime": {
        "type": "number",
        "description": "this field is used for marketing itself."
      },
      "lastmoduserid": {
        "type": "number",
        "description": "An internal version lastmoduserid. Not to be updated directly."
      }
    }
  },
  "lookup_work_status": {
    "type": "object",
    "properties": {
      "id": {
        "type": "number",
        "description": "A unique identifier of the lookupWorkStatuses. Automatically assigned by the API when the lookupWorkStatuses is created."
      },
      "name": {
        "type": "string",
        "description": "The name of the lookupWorkStatuses."
      },
      "symbol": {
        "type": "string",
        "description": "The name of the lookupWorkStatuses."
      },
      "code": {
        "type": "string",
        "description": "The name of the lookupWorkStatuses."
      },
      "description": {
        "type": "string",
        "description": "The description of the lookupWorkStatuses."
      },
      "lastmoddatetime": {
        "type": "number",
        "description": "An internal version stamp. Not to be updateSalaryunits directly."
      },
      "lastmoduserid": {
        "type": "number",
        "description": "An internal version lastmoduserid. Not to be updateSalaryunitsd directly."
      }
    }
  },
  "lookup_Employee_Designations": {
    "type": "object",
    "properties": {
      "id": {
        "type": "number",
        "description": "A unique identifier of the lookupEmployeeDesigantions. Automatically assigned by the API when the lookupEmployeeDesigantions is created."
      },
      "name": {
        "type": "string",
        "description": "The name of the lookupEmployeeDesigantions."
      },
      "flag": {
        "type": "string",
        "description": "The name of the lookupEmployeeDesigantions."
      },
      "description": {
        "type": "string",
        "description": "The description of the lookupEmployeeDesigantions."
      },
      "lastmoddatetime": {
        "type": "number",
        "description": "An internal version stamp. Not to be updateSalaryunits directly."
      },
      "lastmoduserid": {
        "type": "number",
        "description": "An internal version lastmoduserid. Not to be updateSalaryunitsd directly."
      }
    }
  },
  "lookup_Education_levels": {
    "type": "object",
    "properties": {
      "id": {
        "type": "number",
        "description": "A unique identifier of the lookupEducationLevels. Automatically assigned by the API when the lookupEducationLevels is created."
      },
      "name": {
        "type": "string",
        "description": "The name of the lookupEducationLevels."
      },
      "description": {
        "type": "string",
        "description": "The description of the lookupEducationLevels."
      },
      "lastmoddatetime": {
        "type": "number",
        "description": "An internal version stamp. Not to be updatelookupEducationLevels directly."
      },
      "lastmoduserid": {
        "type": "number",
        "description": "An internal version lastmoduserid. Not to be lookupEducationLevels directly."
      }
    }
  },
  "Notification_users": {
    "type": "object",
    "properties": {
      "_id": {
        "type": "number",
        "description": "A unique identifier of the Notification_users. Automatically assigned by the API when the Notification_users is created."
      },
      "name": {
        "type": "number",
        "description": "This name of job."
      },
      "email": {
        "type": "string",
        "description": "This is email of the company."
      },
      "phone": {
        "type": "string",
        "description": "This is phone num of the company."
      },
      "__v": {
        "type": "string",
        "description": "This is question of the Notification_users."
      },
      "active": {
        "type": "string",
        "description": "it will check the user is active or not."
      },
      "subscriptions": {
        "type": "object",
        "properties": {
          "name": {
            "type": "number",
            "description": "This subscriptions name Notification_users."
          }
        }
      },
      "spam_bounce": {
        "type": "string",
        "description": "this field is spam_bounce."
      },
      "soft_bounce": {
        "type": "string",
        "description": "this field issoft_bounce."
      },
      "hard_bounce": {
        "type": "string",
        "description": "this field hard_bounce."
      }
    }
  },
  "organizations": {
    "type": "object",
    "properties": {
      "name": {
        "type": "string"
      },
      "legalName": {
        "type": "string"
      },
      "logo": {
        "type": "string"
      },
      "location": {
        "type": "string"
      },
      "industry": {
        "type": "string"
      },
      "url": {
        "type": "string"
      }
    }
  },
  "staticQuestion": {
    "type": "object",
    "properties": {
      "emp_id": {
        "type": "string"
      },
      "levelParams": {
        "type": "array",
        "items": {
          "type": "integer"
        }
      },
      "quiz": {
        "type": "object",
        "properties": {
          "makeChallenge": {
            "type": "string"
          },
          "limit": {
            "type": "integer"
          },
          "totaltime": {
            "type": "integer"
          },
          "name": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "subject": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "id": {
              "type": "integer"
            }
          }
        }
      },
      "level": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "questions": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "list": {
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        }
      }
    }
  },
  "lookupCountryCurrencies": {
    "type": "object",
    "properties": {
      "country_id": {
        "type": "integer"
      },
      "salaryunit_id": {
        "type": "integer"
      },
      "code": {
        "type": "string"
      }
    }
  },
  "analytics_question": {
    "type": "object",
    "properties": {
      "id": {
        "type": "integer"
      },
      "subjectid": {
        "type": "integer"
      },
      "levelid": {
        "type": "integer"
      },
      "questionid": {
        "type": "integer"
      },
      "count": {
        "type": "integer"
      },
      "Highest_average_time": {
        "type": "integer"
      },
      "totaltime": {
        "type": "integer"
      },
      "review": {
        "type": "string"
      },
      "questiontype": {
        "type": "string"
      },
    }
  },
  "common_Terms": {
    "type": "object",
    "properties": {
      "name": {
        "type": "string"
      },
      "description": {
        "type": "string"
      },
      "lastmoddatetime": {
        "type": "string"
      },
      "lastmoduserid": {
        "type": "integer"
      }
    }
  },
  "typedQuestions": {
    "type": "object",
    "properties": {
      "id": {
        "type": "integer"
      },
      "subjectid": {
        "type": "integer"
      },
      "levelid": {
        "type": "integer"
      },
      "question": {
        "type": "string"
      },
      "preparetime": {
        "type": "integer"
      },
      "time": {
        "type": "integer"
      },
      "reviewDone": {
        "type": "integer"
      },
      "lastmoddatetime": {
        "type": "integer"
      },
      "lastmoduserid": {
        "type": "string"
      },
      "questiontype": {
        "type": "integer"
      },
      "trimquestion": {
        "type": "integer"
      }
    }
  },
  "whiteboardQuestions": {
    "type": "object",
    "properties": {
      "id": {
        "type": "integer"
      },
      "subjectid": {
        "type": "integer"
      },
      "levelid": {
        "type": "integer"
      },
      "question": {
        "type": "string"
      },
      "preparetime": {
        "type": "integer"
      },
      "time": {
        "type": "integer"
      },
      "reviewDone": {
        "type": "integer"
      },
      "lastmoddatetime": {
        "type": "string"
      },
      "lastmoduserid": {
        "type": "integer"
      },
      "questiontype": {
        "type": "string"
      },
      "trimquestion": {
        "type": "string"
      }
    }
  },
  "lookupDesignations": {
    "type": "object",
    "properties": {
      "id": {
        "type": "integer"
      },
      "name": {
        "type": "string"
      },
      "flag": {
        "type": "string"
      },
      "description": {
        "type": "string"
      },
      "lastmoddatetime": {
        "type": "string"
      },
      "lastmoduserid": {
        "type": "integer"
      }
    }
  },
  "lookupSalaryunits": {
    "type": "object",
    "properties": {
      "id": {
        "type": "integer"
      },
      "name": {
        "type": "string"
      },
      "description": {
        "type": "string"
      },
      "symbol": {
        "type": "string"
      },
      "symbol_name": {
        "type": "string"
      },
      "symbol_native": {
        "type": "string"
      },
      "code": {
        "type": "string"
      },
      "lastmoddatetime": {
        "type": "string"
      },
      "lastmoduserid": {
        "type": "integer"
      }
    }
  },
  "employers_subjects": {
    "type": "object",
    "properties": {
      "_id": {
        "type": "string"
      },
      "emp_id": {
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "description": {
        "type": "string"
      },
      "template": {
        "type": "string"
      },
      "codemirror_theme": {
        "type": "string"
      },
      "category": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "alias": {
            "type": "string"
          }
        }
      },
      "lastmoddatetime": {
        "type": "string",
        "format":"date-time"
      },
      "lastmoduserid": {
        "type": "string"
      }
    }
  },
  "employer_interviews": {
    "type": "object",
    "properties": {
      "_id": {
        "type": "string"
      },
      "emp_id": {
        "type": "string"
      },
      "shortUid": {
        "type": "string"
      },
      "email": {
        "type": "string"
      },
      "definition": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "events": {
        "type": "array",
        "items": {
          "type": "string"}
      },
      "subject": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "number"
            },
            "categoryid": {
              "type": "number"
            },
            "name": {
              "type": "string"
            },
            "mode": {
              "type": "string"
            },
            "icon_class": {
              "type": "string"
            },
            "codemirror_theme": {
              "type": "string"
            },
            "flag": {
              "type": "string"
            }
          }}
      },
      "sendEmail":{
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "access": {
              "type": "object",
              "properties": {
                "public": {
                  "type": "boolean"
                },
                "screenSharing": {
                  "type": "boolean"
                }
                ,
                "collaboration": {
                  "type": "boolean"
                },
                "live": {
                  "type": "boolean"
                }
                ,
              }
            },
            "email": {
              "type": "string"
            }

          }}
      },
      "interviewStartDateTime": {
        "type": "string"
      },
      "interviewExpiredDateTime": {
        "type": "string"
      },
      "access": {
        "type": "object",
        "properties": {
          "public": {
            "type": "boolean"
          },
          "screenSharing": {
            "type": "boolean"
          },
          "collaboration": {
            "type": "boolean"
          },
          "live": {
            "type": "boolean"
          }
        }
      },
      "positionDetails": {
        "type": "object",
        "properties": {
          "experience": {
            "type": "string"
          },
          "company": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "location": {
                "type": "string"
              },
              "phone": {
                "type": "string"
              }
            }
          },
          "position": {
            "type": "string"
          },
          "positionType": {
            "type": "string"
          },
          "noOfPositions": {
            "type": "number"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "questions": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "source": {
            "type": "string"
          },
          "list": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number"
                },
                "subjectid": {
                  "type": "number"
                },
                "questiontype": {
                  "type": "string"
                },
                "preparetime": {
                  "type": "number"
                },
                "time": {
                  "type": "number"
                },
                "weightage": {
                  "type": "boolean"
                },
                "tested": {
                  "type": "boolean"
                },
                "approved": {
                  "type": "boolean"
                },
                "reviewed": {
                  "type": "boolean"
                },
                "user": {
                  "type": "boolean"
                },
                "explanation": {
                  "type": "string"
                },
                "answer": {
                  "type": "string"
                },
                "choice6": {
                  "type": "string"
                },
                "choice5": {
                  "type": "string"
                },
                "choice4": {
                  "type": "string"
                },
                "choice3": {
                  "type": "string"
                },
                "choice2": {
                  "type": "string"
                },
                "choice1": {
                  "type": "string"
                },
                "question": {
                  "type": "string"
                },
                "template": {
                  "type": "string"
                },
                "testcases": {
                  "type": "string"
                },
                "hint": {
                  "type": "string"
                }
              }}
          }}
      },
      "detail": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "types": {
              "type": "array",
              "items": {
                "type": "string"}
            },
            "level": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              }
            },
            "makeChallenge": {
              "type": "string"
            }
          }}
      },
      "types": {
        "type": "array",
        "items": {
          "type": "string"}
      },
      "lastmoddatetime": {
        "type": "string",
        "format":"date-time"
      },
      "lastmoduserid": {
        "type": "string"
      }
    }
  },
  "employers_questions": {
    "type": "object",
    "properties": {
      "questiontype": {
        "type": "string"
      },
      "question": {
        "type": "string"
      },
      "hint": {
        "type": "integer"
      },
      "template": {
        "type": "string"
      },
      "testcases": {
        "type": "string"
      },
      "time": {
        "type": "integer"
      },
      "preparetime": {
        "type": "integer"
      },
      "emp_id": {
        "type": "string"
      },
      "common_level": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "subject": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "choice_options": {
        "type": "object",
        "properties": {
          "choice1": {
            "type": "string"
          },
          "choice2": {
            "type": "string"
          },
          "choice3": {
            "type": "string"
          },
          "choice4": {
            "type": "string"
          }
        }
      }
    }
  },
  "resumePermissions": {
    "type": "object",
    "properties": {
      "resumeId": {
        "type": "string"
      },
      "requests": {
        "type": "array",
        "items":  {type:  "string"}
      },
      "privateAccess": {
        "type": "array",
        "items":  {type:  "string"}
      },
      "publicAccess": {
        "type": "object",
        properties: {
          permissions: {
            type: "array",
            "items":  {type:  "string"}
          },
          enabled:  {type: "boolean"}
        }
      },
      "lastmoddatetime": {
        "type": "string"
      },
      "lastmoduserid": {
        "type": "string"
      }
    }
  },
  "resumes": {
    "type": "object",
    "properties": {
      "DocMetadata": {
        "type": "object",
        "properties": {
          "Application-Name": {
            "type": "string"
          },
          "Application-Version": {
            "type": "string"
          },
          "Author": {
            "type": "string"
          },
          "Character Count": {
            "type": "string"
          },
          "Character-Count-With-Spaces": {
            "type": "string"
          },
          "Comments": {
            "type": "string"
          },
          "Company": {
            "type": "string"
          },
          "Content-Encoding": {
            "type": "string"
          },
          "Content-Type": {
            "type": "string"
          },
          "Creation-Date": {
            "type": "string"
          },
          "Edit-Time": {
            "type": "string"
          },
          "Keywords": {
            "type": "string"
          },
          "Last-Author": {
            "type": "string"
          },
          "Last-Modified": {
            "type": "string"
          },
          "Last-Printed": {
            "type": "string"
          },
          "Last-Save-Date": {
            "type": "string"
          },
          "Line-Count": {
            "type": "string"
          },
          "Page-Count": {
            "type": "string"
          },
          "Paragraph-Count": {
            "type": "string"
          },
          "Revision-Number": {
            "type": "string"
          },
          "Template": {
            "type": "string"
          },
          "Total-Time": {
            "type": "string"
          },
          "Word-Count": {
            "type": "string"
          },
          "X-Parsed-By": {
            "type": "string"
          },
          "access_permission:assemble_document": {
            "type": "string"
          },
          "access_permission:can_modify": {
            "type": "string"
          },
          "access_permission:can_print": {
            "type": "string"
          },
          "access_permission:can_print_degraded": {
            "type": "string"
          },
          "access_permission:extract_content": {
            "type": "string"
          },
          "access_permission:extract_for_accessibility": {
            "type": "string"
          },
          "access_permission:fill_in_form": {
            "type": "string"
          },
          "comment": {
            "type": "string"
          },
          "cp:revision": {
            "type": "string"
          },
          "cp:subject": {
            "type": "string"
          },
          "created": {
            "type": "string"
          },
          "creator": {
            "type": "string"
          },
          "custom:AppVersion": {
            "type": "string"
          },
          "custom:DocSecurity": {
            "type": "string"
          },
          "custom:HyperlinksChanged": {
            "type": "string"
          },
          "custom:LinksUpToDate": {
            "type": "string"
          },
          "custom:ScaleCrop": {
            "type": "string"
          },
          "custom:ShareDoc": {
            "type": "string"
          },
          "date": {
            "type": "string"
          },
          "dc:creator": {
            "type": "string"
          },
          "dc:format": {
            "type": "string"
          },
          "dc:language": {
            "type": "string"
          },
          "dc:publisher": {
            "type": "string"
          },
          "dc:subject": {
            "type": "string"
          },
          "dc:title": {
            "type": "string"
          },
          "dcterms:created": {
            "type": "string"
          },
          "dcterms:modified": {
            "type": "string"
          },
          "extended-properties:AppVersion": {
            "type": "string"
          },
          "extended-properties:Application": {
            "type": "string"
          },
          "extended-properties:Company": {
            "type": "string"
          },
          "extended-properties:Template": {
            "type": "string"
          },
          "extended-properties:TotalTime": {
            "type": "string"
          },
          "language": {
            "type": "string"
          },
          "meta:author": {
            "type": "string"
          },
          "meta:character-count": {
            "type": "string"
          },
          "meta:character-count-with-spaces": {
            "type": "string"
          },
          "meta:creation-date": {
            "type": "string"
          },
          "meta:keyword": {
            "type": "string"
          },
          "meta:last-author": {
            "type": "string"
          },
          "meta:line-count": {
            "type": "string"
          },
          "meta:page-count": {
            "type": "string"
          },
          "meta:paragraph-count": {
            "type": "string"
          },
          "meta:print-date": {
            "type": "string"
          },
          "meta:save-date": {
            "type": "string"
          },
          "meta:word-count": {
            "type": "string"
          },
          "modified": {
            "type": "string"
          },
          "pdf:PDFVersion": {
            "type": "string"
          },
          "pdf:docinfo:created": {
            "type": "string"
          },
          "pdf:docinfo:creator_tool": {
            "type": "string"
          },
          "pdf:docinfo:modified": {
            "type": "string"
          },
          "pdf:docinfo:producer": {
            "type": "string"
          },
          "pdf:encrypted": {
            "type": "string"
          },
          "producer": {
            "type": "string"
          },
          "publisher": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "w:comments": {
            "type": "string"
          },
          "xmp:CreatorTool": {
            "type": "string"
          },
          "xmpMM:DocumentID": {
            "type": "string"
          },
          "xmpTPg:NPages": {
            "type": "string"
          }
        }},
      "FileName": {
        "type": "string"
      },
      "awards": {
        "type": "object",
        "properties": {
          "awarder": {
            "type": "string"
          },
          "date": {
            "type": "string"
          },
          "startDate": {
            "type": "string"
          },
          "summary": {
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        }},
      "basics": {
        "type": "object",
        "properties": {
          "designation": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "phoneNumber": {
            "type": "string"
          },
          "profile": {
            "type": "string"
          },
          "summary": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "websites": {
            "type": "string"
          }
        }},
      "education": {
        "type": "object",
        "properties": {
          "area": {
            "type": "string"
          },
          "course": {
            "type": "string"
          },
          "courses": {
            "type": "string"
          },
          "endDate": {
            "type": "string"
          },
          "gpa": {
            "type": "string"
          },
          "institution": {
            "type": "string"
          },
          "place": {
            "type": "string"
          },
          "startDate": {
            "type": "string"
          },
          "studyType": {
            "type": "string"
          }
        }},
      "id": {
        "type": "string"
      },
      "profiles": {
        "type": "object",
        "properties": {
          "network": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "website": {
            "type": "string"
          }
        }},
      "references": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "emailAddress": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "phoneNumber": {
            "type": "string"
          },
          "reference": {
            "type": "string"
          }
        }},
      "resume_Id": {
        "type": "string"
      },
      "skills": {
        "type": "object",
        "properties": {
          "keywords": {
            "type": "string"
          },
          "level": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "personal skills": {
            "type": "string"
          },
          "skills": {
            "type": "string"
          }
        }},
      "volunteer": {
        "type": "object",
        "properties": {
          "endDate": {
            "type": "string"
          },
          "organization": {
            "type": "string"
          },
          "position": {
            "type": "string"
          },
          "startDate": {
            "type": "string"
          },
          "summary": {
            "type": "string"
          },
          "website": {
            "type": "string"
          }
        }},
      "work": {
        "type": "object",
        "properties": {
          "company": {
            "type": "string"
          },
          "endDate": {
            "type": "string"
          },
          "highlights": {
            "type": "string"
          },
          "position": {
            "type": "string"
          },
          "startDate": {
            "type": "string"
          },
          "summary": {
            "type": "string"
          },
          "website": {
            "type": "string"
          }
        }},
      "lastmoddatetime": {
        "type": "string",
        "format":"date-time"
      },
      "lastmoduserid": {
        "type": "string"
      }
    }
  },
  "resumeRequests": {
    "type": "object",
    "properties": {
      "resumeId": {
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "email": {
        "type": "string"
      },
      "resumeRequest": {
        "type": "boolean"
      },
      "privacyAccessIsEnable": {
        "type": "boolean"
      },
      "lastmoddatetime": {
        "type": "string"
      },
      "lastmoduserid": {
        "type": "string"
      }
    }
  },
  "cacheLoad": {
    "type": "object",
    "properties": {
      "route": {
        "type": "string"
      }
    }
  },
  "jobs": {
    "type": "object",
    "properties": {
      "job":{
        "type": "object",
        "properties": {
          "baseSalary": {
            "type": "object",
            "properties": {
              "value": {
                "type": "object",
                "properties": {
                  "currency": {
                    "type": "string"
                  },
                  "maxValue": {
                    "type": "string"
                  },
                  "minValue": {
                    "type": "string"
                  },
                  "unitText": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string"
                  }
                }}
            }},
          "categories": {
            "type": "object",
            "properties": {
              "category": {
                "type": "string"
              },
              "skills": {
                "type": "string"
              }
            }},
          "description": {
            "type": "string"
          },
          "duration": {
            "type": "object",
            "properties": {
              "units": {
                "type": "string"
              },
              "value": {
                "type": "number"
              }
            }},
          "education": {
            "type": "string"
          },
          "education_requirements": {
            "type": "string"
          },
          "educational_requirements": {
            "type": "string"
          },
          "emails": {
            "type": "string"
          },
          "emp_id": {
            "type": "string"
          },
          "employer": {
            "type": "object",
            "properties": {
              "apply_url": {
                "type": "string"
              },
              "email": {
                "type": "string"
              },
              "employee_id": {
                "type": "string"
              },
              "identifier": {
                "type": "string"
              },
              "linkedin": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }},
          "employment_type": {
            "type": "string"
          },
          "experience": {
            "type": "object",
            "properties": {
              "total": {
                "type": "number"
              },
              "units": {
                "type": "string"
              },
              "value": {
                "type": "number"
              }
            }},
          "fax": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "incentives_compentation": {
            "type": "string"
          },
          "industry": {
            "type": "string"
          },
          "interview": {
            "type": "string"
          },
          "jobBenifits": {
            "type": "string"
          },
          "linkedin": {
            "type": "string"
          },
          "location": {
            "type": "object",
            "properties": {
              "city": {
                "type": "string"
              },
              "country": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "postalCode": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "pin": {
                "type": "object",
                "properties": {
                  "lat": {
                    "type": "string"
                  },
                  "lon": {
                    "type": "string"
                  }
                }
              }
            }},
          "metadata": {
            "type": "object",
            "properties": {
              "Content-Encoding": {
                "type": "string"
              },
              "Content-Type": {
                "type": "string"
              },
              "Content-Type-Hint": {
                "type": "string"
              },
              "Generator": {
                "type": "string"
              },
              "X-Parsed-By": {
                "type": "string"
              },
              "content": {
                "type": "string"
              }}},
          "must_have_skills": {
            "type": "string"
          },
          "nice_to_have_skills": {
            "type": "string"
          },
          "organization": {
            "type": "object",
            "properties": {
              "level": {
                "type": "string"
              },
              "manpower": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "url": {
                "type": "string"
              }
            }},
          "phoneNumbers": {
            "type": "string"
          },
          "positionStatus": {
            "type": "string"
          },
          "posted_date": {
            "type": "string",
            "format":"date-time"
          },
          "primary_email": {
            "type": "string"
          },
          "reference_id": {
            "type": "string"
          },
          "responsibilities": {
            "type": "string"
          },
          "source": {
            "type": "string"
          },
          "special_commitments": {
            "type": "string"
          },
          "tele_commute": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "totalPositions": {
            "type": "string"
          },
          "uid": {
            "type": "string"
          },
          "valid_through": {
            "type": "string",
            "format":"date-time"
          },
          "work_authorizations": {
            "type": "string"
          }
        }
      },
      "lastmoddatetime": {
        "type": "string",
        "format":"date-time"
      },
      "lastmoduserid": {
        "type": "string"
      }

    }
  },
  "skills": {
    "type": "object",
    "properties": {
      "skill": {
        "type": "string"
      },
      "category": {
        "type": "string"
      },
      "alias": {
        "type": "string"
      },
      "hint": {
        "type": "integer"
      }

    }
  },
  "common_Entities": {
    "type": "object",
    "properties": {
      "name": {
        "type": "string"
      },
      "display_name": {
        "type": "string"
      },
      "description": {
        "type": "string"
      },
      "lastmoddatetime": {
        "type": "string"
      },
      "lastmoduserid": {
        "type": "integer"
      }
    }
  },
  "common_Values": {
    "type": "object",
    "properties": {
      "audio": {
        "type": "string"
      },
      "vedio": {
        "type": "string"
      },
      "periodlevel": {
        "type": "string"
      },
      "entityid": {
        "type": "number"
      },
      "lastmoddatetime": {
        "type": "string"
      },
      "lastmoduserid": {
        "type": "integer"
      }
    }
  },
  "cacheDeletion": {
    "type": "object",
    "properties": {
      "base_url": {
        "type": "string"
      },
      "type": {
        "type": "string"
      }
    }
  },
  "compiler": {
    "type": "object",
    "properties": {
      "compilerid": {
        "type": "string"
      },
      "subjectid": {
        "type": "string"
      },
      "compiler_required": {
        "type": "string"
      }
    }
  },
  "challenges": {
    "type": "object",
    "properties": {
      "_id": {
        "type": "string"
      },
      "candidate_id": {
        "type": "string"
      },
      "email": {
        "type": "string"
      },
      "user_agent": {
        "type": "object"
      },
      "questions": {
        "type": "array",
        "items": {
          "type": "object"
        }
      },
      "level": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "name": {
            "type": "string"
          }
        }},
      "subject": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "name": {
            "type": "string"
          },
          "icon": {
            "type": "string"
          }
        }},
      "quiz": {
        "type": "object",
        "properties": {
          "name": {
            "type": "number"
          },
          "quizName": {
            "type": "string"
          },
          "makeChallenge": {
            "type": "string"
          }
        }},
      "collabarateId": {
        "type": "string"
      },
      "collabaration": {
        "type": "boolean"
      },
      "correct": {
        "type": "number"
      },
      "attempted": {
        "type": "number"
      },
      "time_taken": {
        "type": "number"
      },
      "total_time": {
        "type": "number"
      },
      "youtube_id": {
        "type": "object",
        "properties":{
          "audio": {
            "type": "string"
          },
          "video": {
            "type": "string"
          }
        }
      },
      "is_screen_sharing": {
        "type": "boolean"
      },
      "screen_sharing_id": {
        "type": "string"
      },
      "challengedatetime": {
        "type": "string",
        "format":"date-time"
      },
      "location": {
        "type": "string"
      },
      "browser": {
        "type": "string"
      },
      "definationDetails": {
        "type": "object",
        "properties":{
          "emp_id": {
            "type": "string"
          },
          "definitionId": {
            "type": "string"
          },
          "interviewerEmail": {
            "type": "string"
          },
          "interviewerName": {
            "type": "string"
          },
          "interviewName": {
            "type": "string"
          },
          "access": {
            "type": "object",
            "properties":{
              "live": {
                "type": "boolean"
              },
              "collaboration": {
                "type": "string"
              },
              "collabarateId": {
                "type": "string"
              },
              "screenSharing": {
                "type": "boolean"
              },
              "screen_sharing_id": {
                "type": "string"
              },
              "public": {
                "type": "boolean"
              }
            }
          },
          "events": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "positionDetails": {
            "type": "object",
            "properties":{
              "experience": {
                "type": "boolean"
              },
              "company": {
                "type": "object",
                "properties":{
                  "name": {
                    "type": "string"
                  },
                  "location": {
                    "type": "string"
                  },
                  "phone": {
                    "type": "string"
                  }
                }
              },
              "position": {
                "type": "string"
              },
              "positionType": {
                "type": "string"
              },
              "noOfPositions": {
                "type": "number"
              },
              "description": {
                "type": "string"
              },
              "skills": {
                "type": "array",
                "items": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "geo_location": {
        "type": "object",
        "properties":{
          "ip_address":{
            "type": "string"
          }
        }
      },
      "public_view": {
        "type": "object",
        "properties":{
          "status": {
            "type": "boolean"
          },
          "likes": {
            "type": "number"
          },
          "review": {
            "type": "number"
          }
        }
      },
      "lastmoddatetime": {
        "type": "string",
        "format":"date-time"
      },
      "lastmoduserid": {
        "type": "string"
      }
    }
  },
  "google_api": {
    "type": "object",
    "properties": {
      "access_token": {
        "type": "string"
      },
      "expires_in": {
        "type": "number"
      },
      "scope": {
        "type": "string"
      },
      "token_type": {
        "type": "string"
      }
    }
  },
  "lookupIndustries": {
    "type": "object",
    "properties": {
      "name": {
        "type": "string"
      },
      "flag": {
        "type": "string"
      },
      "description": {
        "type": "string"
      }
    }
  }
}